/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the MeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeResponse{}

// MeResponse struct for MeResponse
type MeResponse struct {
	Extras *map[string]string `json:"extras,omitempty"`
	Organization V1Organization `json:"organization"`
	User V1User `json:"user"`
	VcsIntegration CommonsVCSIntegrationLean `json:"vcs_integration"`
	AdditionalProperties map[string]interface{}
}

type _MeResponse MeResponse

// NewMeResponse instantiates a new MeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeResponse(organization V1Organization, user V1User, vcsIntegration CommonsVCSIntegrationLean) *MeResponse {
	this := MeResponse{}
	this.Organization = organization
	this.User = user
	this.VcsIntegration = vcsIntegration
	return &this
}

// NewMeResponseWithDefaults instantiates a new MeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeResponseWithDefaults() *MeResponse {
	this := MeResponse{}
	return &this
}

// GetExtras returns the Extras field value if set, zero value otherwise.
func (o *MeResponse) GetExtras() map[string]string {
	if o == nil || IsNil(o.Extras) {
		var ret map[string]string
		return ret
	}
	return *o.Extras
}

// GetExtrasOk returns a tuple with the Extras field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeResponse) GetExtrasOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Extras) {
		return nil, false
	}
	return o.Extras, true
}

// HasExtras returns a boolean if a field has been set.
func (o *MeResponse) HasExtras() bool {
	if o != nil && !IsNil(o.Extras) {
		return true
	}

	return false
}

// SetExtras gets a reference to the given map[string]string and assigns it to the Extras field.
func (o *MeResponse) SetExtras(v map[string]string) {
	o.Extras = &v
}

// GetOrganization returns the Organization field value
func (o *MeResponse) GetOrganization() V1Organization {
	if o == nil {
		var ret V1Organization
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *MeResponse) GetOrganizationOk() (*V1Organization, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *MeResponse) SetOrganization(v V1Organization) {
	o.Organization = v
}

// GetUser returns the User field value
func (o *MeResponse) GetUser() V1User {
	if o == nil {
		var ret V1User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *MeResponse) GetUserOk() (*V1User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *MeResponse) SetUser(v V1User) {
	o.User = v
}

// GetVcsIntegration returns the VcsIntegration field value
func (o *MeResponse) GetVcsIntegration() CommonsVCSIntegrationLean {
	if o == nil {
		var ret CommonsVCSIntegrationLean
		return ret
	}

	return o.VcsIntegration
}

// GetVcsIntegrationOk returns a tuple with the VcsIntegration field value
// and a boolean to check if the value has been set.
func (o *MeResponse) GetVcsIntegrationOk() (*CommonsVCSIntegrationLean, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VcsIntegration, true
}

// SetVcsIntegration sets field value
func (o *MeResponse) SetVcsIntegration(v CommonsVCSIntegrationLean) {
	o.VcsIntegration = v
}

func (o MeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Extras) {
		toSerialize["extras"] = o.Extras
	}
	toSerialize["organization"] = o.Organization
	toSerialize["user"] = o.User
	toSerialize["vcs_integration"] = o.VcsIntegration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MeResponse) UnmarshalJSON(bytes []byte) (err error) {
	varMeResponse := _MeResponse{}

	err = json.Unmarshal(bytes, &varMeResponse)

	if err != nil {
		return err
	}

	*o = MeResponse(varMeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "extras")
		delete(additionalProperties, "organization")
		delete(additionalProperties, "user")
		delete(additionalProperties, "vcs_integration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMeResponse struct {
	value *MeResponse
	isSet bool
}

func (v NullableMeResponse) Get() *MeResponse {
	return v.value
}

func (v *NullableMeResponse) Set(val *MeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeResponse(val *MeResponse) *NullableMeResponse {
	return &NullableMeResponse{value: val, isSet: true}
}

func (v NullableMeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


