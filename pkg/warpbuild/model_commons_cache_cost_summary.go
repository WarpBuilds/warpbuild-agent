/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsCacheCostSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsCacheCostSummary{}

// CommonsCacheCostSummary struct for CommonsCacheCostSummary
type CommonsCacheCostSummary struct {
	CacheStorageSizeBytes *float32 `json:"cache_storage_size_bytes,omitempty"`
	NumCacheOperations *int32 `json:"num_cache_operations,omitempty"`
	TotalCost *float32 `json:"total_cost,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsCacheCostSummary CommonsCacheCostSummary

// NewCommonsCacheCostSummary instantiates a new CommonsCacheCostSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsCacheCostSummary() *CommonsCacheCostSummary {
	this := CommonsCacheCostSummary{}
	return &this
}

// NewCommonsCacheCostSummaryWithDefaults instantiates a new CommonsCacheCostSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsCacheCostSummaryWithDefaults() *CommonsCacheCostSummary {
	this := CommonsCacheCostSummary{}
	return &this
}

// GetCacheStorageSizeBytes returns the CacheStorageSizeBytes field value if set, zero value otherwise.
func (o *CommonsCacheCostSummary) GetCacheStorageSizeBytes() float32 {
	if o == nil || IsNil(o.CacheStorageSizeBytes) {
		var ret float32
		return ret
	}
	return *o.CacheStorageSizeBytes
}

// GetCacheStorageSizeBytesOk returns a tuple with the CacheStorageSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCacheCostSummary) GetCacheStorageSizeBytesOk() (*float32, bool) {
	if o == nil || IsNil(o.CacheStorageSizeBytes) {
		return nil, false
	}
	return o.CacheStorageSizeBytes, true
}

// HasCacheStorageSizeBytes returns a boolean if a field has been set.
func (o *CommonsCacheCostSummary) HasCacheStorageSizeBytes() bool {
	if o != nil && !IsNil(o.CacheStorageSizeBytes) {
		return true
	}

	return false
}

// SetCacheStorageSizeBytes gets a reference to the given float32 and assigns it to the CacheStorageSizeBytes field.
func (o *CommonsCacheCostSummary) SetCacheStorageSizeBytes(v float32) {
	o.CacheStorageSizeBytes = &v
}

// GetNumCacheOperations returns the NumCacheOperations field value if set, zero value otherwise.
func (o *CommonsCacheCostSummary) GetNumCacheOperations() int32 {
	if o == nil || IsNil(o.NumCacheOperations) {
		var ret int32
		return ret
	}
	return *o.NumCacheOperations
}

// GetNumCacheOperationsOk returns a tuple with the NumCacheOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCacheCostSummary) GetNumCacheOperationsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumCacheOperations) {
		return nil, false
	}
	return o.NumCacheOperations, true
}

// HasNumCacheOperations returns a boolean if a field has been set.
func (o *CommonsCacheCostSummary) HasNumCacheOperations() bool {
	if o != nil && !IsNil(o.NumCacheOperations) {
		return true
	}

	return false
}

// SetNumCacheOperations gets a reference to the given int32 and assigns it to the NumCacheOperations field.
func (o *CommonsCacheCostSummary) SetNumCacheOperations(v int32) {
	o.NumCacheOperations = &v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *CommonsCacheCostSummary) GetTotalCost() float32 {
	if o == nil || IsNil(o.TotalCost) {
		var ret float32
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCacheCostSummary) GetTotalCostOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCost) {
		return nil, false
	}
	return o.TotalCost, true
}

// HasTotalCost returns a boolean if a field has been set.
func (o *CommonsCacheCostSummary) HasTotalCost() bool {
	if o != nil && !IsNil(o.TotalCost) {
		return true
	}

	return false
}

// SetTotalCost gets a reference to the given float32 and assigns it to the TotalCost field.
func (o *CommonsCacheCostSummary) SetTotalCost(v float32) {
	o.TotalCost = &v
}

func (o CommonsCacheCostSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsCacheCostSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CacheStorageSizeBytes) {
		toSerialize["cache_storage_size_bytes"] = o.CacheStorageSizeBytes
	}
	if !IsNil(o.NumCacheOperations) {
		toSerialize["num_cache_operations"] = o.NumCacheOperations
	}
	if !IsNil(o.TotalCost) {
		toSerialize["total_cost"] = o.TotalCost
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsCacheCostSummary) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsCacheCostSummary := _CommonsCacheCostSummary{}

	err = json.Unmarshal(bytes, &varCommonsCacheCostSummary)

	if err != nil {
		return err
	}

	*o = CommonsCacheCostSummary(varCommonsCacheCostSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "cache_storage_size_bytes")
		delete(additionalProperties, "num_cache_operations")
		delete(additionalProperties, "total_cost")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsCacheCostSummary struct {
	value *CommonsCacheCostSummary
	isSet bool
}

func (v NullableCommonsCacheCostSummary) Get() *CommonsCacheCostSummary {
	return v.value
}

func (v *NullableCommonsCacheCostSummary) Set(val *CommonsCacheCostSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsCacheCostSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsCacheCostSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsCacheCostSummary(val *CommonsCacheCostSummary) *NullableCommonsCacheCostSummary {
	return &NullableCommonsCacheCostSummary{value: val, isSet: true}
}

func (v NullableCommonsCacheCostSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsCacheCostSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


