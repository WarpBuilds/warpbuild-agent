/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsBannerMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsBannerMessage{}

// CommonsBannerMessage struct for CommonsBannerMessage
type CommonsBannerMessage struct {
	Closeable *bool `json:"closeable,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsBannerMessage CommonsBannerMessage

// NewCommonsBannerMessage instantiates a new CommonsBannerMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsBannerMessage() *CommonsBannerMessage {
	this := CommonsBannerMessage{}
	return &this
}

// NewCommonsBannerMessageWithDefaults instantiates a new CommonsBannerMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsBannerMessageWithDefaults() *CommonsBannerMessage {
	this := CommonsBannerMessage{}
	return &this
}

// GetCloseable returns the Closeable field value if set, zero value otherwise.
func (o *CommonsBannerMessage) GetCloseable() bool {
	if o == nil || IsNil(o.Closeable) {
		var ret bool
		return ret
	}
	return *o.Closeable
}

// GetCloseableOk returns a tuple with the Closeable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBannerMessage) GetCloseableOk() (*bool, bool) {
	if o == nil || IsNil(o.Closeable) {
		return nil, false
	}
	return o.Closeable, true
}

// HasCloseable returns a boolean if a field has been set.
func (o *CommonsBannerMessage) HasCloseable() bool {
	if o != nil && !IsNil(o.Closeable) {
		return true
	}

	return false
}

// SetCloseable gets a reference to the given bool and assigns it to the Closeable field.
func (o *CommonsBannerMessage) SetCloseable(v bool) {
	o.Closeable = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonsBannerMessage) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBannerMessage) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonsBannerMessage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CommonsBannerMessage) SetId(v int32) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CommonsBannerMessage) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBannerMessage) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CommonsBannerMessage) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CommonsBannerMessage) SetMessage(v string) {
	o.Message = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *CommonsBannerMessage) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBannerMessage) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *CommonsBannerMessage) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *CommonsBannerMessage) SetPriority(v int32) {
	o.Priority = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommonsBannerMessage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBannerMessage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommonsBannerMessage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommonsBannerMessage) SetType(v string) {
	o.Type = &v
}

func (o CommonsBannerMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsBannerMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Closeable) {
		toSerialize["closeable"] = o.Closeable
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsBannerMessage) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsBannerMessage := _CommonsBannerMessage{}

	if err = json.Unmarshal(bytes, &varCommonsBannerMessage); err == nil {
		*o = CommonsBannerMessage(varCommonsBannerMessage)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "closeable")
		delete(additionalProperties, "id")
		delete(additionalProperties, "message")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsBannerMessage struct {
	value *CommonsBannerMessage
	isSet bool
}

func (v NullableCommonsBannerMessage) Get() *CommonsBannerMessage {
	return v.value
}

func (v *NullableCommonsBannerMessage) Set(val *CommonsBannerMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsBannerMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsBannerMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsBannerMessage(val *CommonsBannerMessage) *NullableCommonsBannerMessage {
	return &NullableCommonsBannerMessage{value: val, isSet: true}
}

func (v NullableCommonsBannerMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsBannerMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


