/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


type V1SkuAPI interface {

	/*
	GetSku Get default group for runner set

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSkuRequest
	*/
	GetSku(ctx context.Context) ApiGetSkuRequest

	// GetSkuExecute executes the request
	//  @return CommonsInstanceSku
	GetSkuExecute(r ApiGetSkuRequest) (*CommonsInstanceSku, *http.Response, error)

	/*
	ListSku ListAllSku lists all the runners sku for an org.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListSkuRequest
	*/
	ListSku(ctx context.Context) ApiListSkuRequest

	// ListSkuExecute executes the request
	//  @return []CommonsInstanceSku
	ListSkuExecute(r ApiListSkuRequest) ([]CommonsInstanceSku, *http.Response, error)
}

// V1SkuAPIService V1SkuAPI service
type V1SkuAPIService service

type ApiGetSkuRequest struct {
	ctx context.Context
	ApiService V1SkuAPI
}

func (r ApiGetSkuRequest) Execute() (*CommonsInstanceSku, *http.Response, error) {
	return r.ApiService.GetSkuExecute(r)
}

/*
GetSku Get default group for runner set

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSkuRequest
*/
func (a *V1SkuAPIService) GetSku(ctx context.Context) ApiGetSkuRequest {
	return ApiGetSkuRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsInstanceSku
func (a *V1SkuAPIService) GetSkuExecute(r ApiGetSkuRequest) (*CommonsInstanceSku, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsInstanceSku
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SkuAPIService.GetSku")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sku/{id}"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSkuRequest struct {
	ctx context.Context
	ApiService V1SkuAPI
	ids *[]string
	cores *int32
	memory *int32
	arch *string
	os *[]string
	manufacturer *string
	performanceCategory *string
	hasGpu *bool
	burstable *bool
	includeInternal *bool
}

// list of sku id&#39;s
func (r ApiListSkuRequest) Ids(ids []string) ApiListSkuRequest {
	r.ids = &ids
	return r
}

// cores
func (r ApiListSkuRequest) Cores(cores int32) ApiListSkuRequest {
	r.cores = &cores
	return r
}

// memory
func (r ApiListSkuRequest) Memory(memory int32) ApiListSkuRequest {
	r.memory = &memory
	return r
}

// Architectures
func (r ApiListSkuRequest) Arch(arch string) ApiListSkuRequest {
	r.arch = &arch
	return r
}

// operating system
func (r ApiListSkuRequest) Os(os []string) ApiListSkuRequest {
	r.os = &os
	return r
}

// Images
func (r ApiListSkuRequest) Manufacturer(manufacturer string) ApiListSkuRequest {
	r.manufacturer = &manufacturer
	return r
}

// performance category
func (r ApiListSkuRequest) PerformanceCategory(performanceCategory string) ApiListSkuRequest {
	r.performanceCategory = &performanceCategory
	return r
}

// has gpu
func (r ApiListSkuRequest) HasGpu(hasGpu bool) ApiListSkuRequest {
	r.hasGpu = &hasGpu
	return r
}

// burstable
func (r ApiListSkuRequest) Burstable(burstable bool) ApiListSkuRequest {
	r.burstable = &burstable
	return r
}

// include internal skus
func (r ApiListSkuRequest) IncludeInternal(includeInternal bool) ApiListSkuRequest {
	r.includeInternal = &includeInternal
	return r
}

func (r ApiListSkuRequest) Execute() ([]CommonsInstanceSku, *http.Response, error) {
	return r.ApiService.ListSkuExecute(r)
}

/*
ListSku ListAllSku lists all the runners sku for an org.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSkuRequest
*/
func (a *V1SkuAPIService) ListSku(ctx context.Context) ApiListSkuRequest {
	return ApiListSkuRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CommonsInstanceSku
func (a *V1SkuAPIService) ListSkuExecute(r ApiListSkuRequest) ([]CommonsInstanceSku, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CommonsInstanceSku
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SkuAPIService.ListSku")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sku"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ids != nil {
		t := *r.ids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ids", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ids", t, "multi")
		}
	}
	if r.cores != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cores", r.cores, "")
	}
	if r.memory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memory", r.memory, "")
	}
	if r.arch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch", r.arch, "")
	}
	if r.os != nil {
		t := *r.os
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "os", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "os", t, "multi")
		}
	}
	if r.manufacturer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", r.manufacturer, "")
	}
	if r.performanceCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "performance_category", r.performanceCategory, "")
	}
	if r.hasGpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_gpu", r.hasGpu, "")
	}
	if r.burstable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "burstable", r.burstable, "")
	}
	if r.includeInternal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_internal", r.includeInternal, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
