/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRunnerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRunnerInstance{}

// CommonsRunnerInstance struct for CommonsRunnerInstance
type CommonsRunnerInstance struct {
	Cluster *string `json:"cluster,omitempty"`
	Configuration *CommonsRunnerConfiguration `json:"configuration,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	Id *string `json:"id,omitempty"`
	LastJobProcessedId *string `json:"last_job_processed_id,omitempty"`
	LastPolled *string `json:"last_polled,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	RunnerFor *string `json:"runner_for,omitempty"`
	RunnerSetId *string `json:"runner_set_id,omitempty"`
	Status *string `json:"status,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	VcsIntegrationId *string `json:"vcs_integration_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRunnerInstance CommonsRunnerInstance

// NewCommonsRunnerInstance instantiates a new CommonsRunnerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRunnerInstance() *CommonsRunnerInstance {
	this := CommonsRunnerInstance{}
	return &this
}

// NewCommonsRunnerInstanceWithDefaults instantiates a new CommonsRunnerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRunnerInstanceWithDefaults() *CommonsRunnerInstance {
	this := CommonsRunnerInstance{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *CommonsRunnerInstance) SetCluster(v string) {
	o.Cluster = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetConfiguration() CommonsRunnerConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret CommonsRunnerConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetConfigurationOk() (*CommonsRunnerConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given CommonsRunnerConfiguration and assigns it to the Configuration field.
func (o *CommonsRunnerInstance) SetConfiguration(v CommonsRunnerConfiguration) {
	o.Configuration = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CommonsRunnerInstance) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *CommonsRunnerInstance) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommonsRunnerInstance) SetId(v string) {
	o.Id = &v
}

// GetLastJobProcessedId returns the LastJobProcessedId field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetLastJobProcessedId() string {
	if o == nil || IsNil(o.LastJobProcessedId) {
		var ret string
		return ret
	}
	return *o.LastJobProcessedId
}

// GetLastJobProcessedIdOk returns a tuple with the LastJobProcessedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetLastJobProcessedIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastJobProcessedId) {
		return nil, false
	}
	return o.LastJobProcessedId, true
}

// HasLastJobProcessedId returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasLastJobProcessedId() bool {
	if o != nil && !IsNil(o.LastJobProcessedId) {
		return true
	}

	return false
}

// SetLastJobProcessedId gets a reference to the given string and assigns it to the LastJobProcessedId field.
func (o *CommonsRunnerInstance) SetLastJobProcessedId(v string) {
	o.LastJobProcessedId = &v
}

// GetLastPolled returns the LastPolled field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetLastPolled() string {
	if o == nil || IsNil(o.LastPolled) {
		var ret string
		return ret
	}
	return *o.LastPolled
}

// GetLastPolledOk returns a tuple with the LastPolled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetLastPolledOk() (*string, bool) {
	if o == nil || IsNil(o.LastPolled) {
		return nil, false
	}
	return o.LastPolled, true
}

// HasLastPolled returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasLastPolled() bool {
	if o != nil && !IsNil(o.LastPolled) {
		return true
	}

	return false
}

// SetLastPolled gets a reference to the given string and assigns it to the LastPolled field.
func (o *CommonsRunnerInstance) SetLastPolled(v string) {
	o.LastPolled = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *CommonsRunnerInstance) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetRunnerFor returns the RunnerFor field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetRunnerFor() string {
	if o == nil || IsNil(o.RunnerFor) {
		var ret string
		return ret
	}
	return *o.RunnerFor
}

// GetRunnerForOk returns a tuple with the RunnerFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetRunnerForOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerFor) {
		return nil, false
	}
	return o.RunnerFor, true
}

// HasRunnerFor returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasRunnerFor() bool {
	if o != nil && !IsNil(o.RunnerFor) {
		return true
	}

	return false
}

// SetRunnerFor gets a reference to the given string and assigns it to the RunnerFor field.
func (o *CommonsRunnerInstance) SetRunnerFor(v string) {
	o.RunnerFor = &v
}

// GetRunnerSetId returns the RunnerSetId field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetRunnerSetId() string {
	if o == nil || IsNil(o.RunnerSetId) {
		var ret string
		return ret
	}
	return *o.RunnerSetId
}

// GetRunnerSetIdOk returns a tuple with the RunnerSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetRunnerSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerSetId) {
		return nil, false
	}
	return o.RunnerSetId, true
}

// HasRunnerSetId returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasRunnerSetId() bool {
	if o != nil && !IsNil(o.RunnerSetId) {
		return true
	}

	return false
}

// SetRunnerSetId gets a reference to the given string and assigns it to the RunnerSetId field.
func (o *CommonsRunnerInstance) SetRunnerSetId(v string) {
	o.RunnerSetId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CommonsRunnerInstance) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *CommonsRunnerInstance) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetVcsIntegrationId returns the VcsIntegrationId field value if set, zero value otherwise.
func (o *CommonsRunnerInstance) GetVcsIntegrationId() string {
	if o == nil || IsNil(o.VcsIntegrationId) {
		var ret string
		return ret
	}
	return *o.VcsIntegrationId
}

// GetVcsIntegrationIdOk returns a tuple with the VcsIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstance) GetVcsIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcsIntegrationId) {
		return nil, false
	}
	return o.VcsIntegrationId, true
}

// HasVcsIntegrationId returns a boolean if a field has been set.
func (o *CommonsRunnerInstance) HasVcsIntegrationId() bool {
	if o != nil && !IsNil(o.VcsIntegrationId) {
		return true
	}

	return false
}

// SetVcsIntegrationId gets a reference to the given string and assigns it to the VcsIntegrationId field.
func (o *CommonsRunnerInstance) SetVcsIntegrationId(v string) {
	o.VcsIntegrationId = &v
}

func (o CommonsRunnerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRunnerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastJobProcessedId) {
		toSerialize["last_job_processed_id"] = o.LastJobProcessedId
	}
	if !IsNil(o.LastPolled) {
		toSerialize["last_polled"] = o.LastPolled
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.RunnerFor) {
		toSerialize["runner_for"] = o.RunnerFor
	}
	if !IsNil(o.RunnerSetId) {
		toSerialize["runner_set_id"] = o.RunnerSetId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.VcsIntegrationId) {
		toSerialize["vcs_integration_id"] = o.VcsIntegrationId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRunnerInstance) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRunnerInstance := _CommonsRunnerInstance{}

	err = json.Unmarshal(bytes, &varCommonsRunnerInstance)

	if err != nil {
		return err
	}

	*o = CommonsRunnerInstance(varCommonsRunnerInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "id")
		delete(additionalProperties, "last_job_processed_id")
		delete(additionalProperties, "last_polled")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "runner_for")
		delete(additionalProperties, "runner_set_id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "vcs_integration_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRunnerInstance struct {
	value *CommonsRunnerInstance
	isSet bool
}

func (v NullableCommonsRunnerInstance) Get() *CommonsRunnerInstance {
	return v.value
}

func (v *NullableCommonsRunnerInstance) Set(val *CommonsRunnerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRunnerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRunnerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRunnerInstance(val *CommonsRunnerInstance) *NullableCommonsRunnerInstance {
	return &NullableCommonsRunnerInstance{value: val, isSet: true}
}

func (v NullableCommonsRunnerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRunnerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


