/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsSetMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsSetMeta{}

// CommonsSetMeta struct for CommonsSetMeta
type CommonsSetMeta struct {
	SupportsSnapshot *bool `json:"supports_snapshot,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsSetMeta CommonsSetMeta

// NewCommonsSetMeta instantiates a new CommonsSetMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsSetMeta() *CommonsSetMeta {
	this := CommonsSetMeta{}
	return &this
}

// NewCommonsSetMetaWithDefaults instantiates a new CommonsSetMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsSetMetaWithDefaults() *CommonsSetMeta {
	this := CommonsSetMeta{}
	return &this
}

// GetSupportsSnapshot returns the SupportsSnapshot field value if set, zero value otherwise.
func (o *CommonsSetMeta) GetSupportsSnapshot() bool {
	if o == nil || IsNil(o.SupportsSnapshot) {
		var ret bool
		return ret
	}
	return *o.SupportsSnapshot
}

// GetSupportsSnapshotOk returns a tuple with the SupportsSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsSetMeta) GetSupportsSnapshotOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsSnapshot) {
		return nil, false
	}
	return o.SupportsSnapshot, true
}

// HasSupportsSnapshot returns a boolean if a field has been set.
func (o *CommonsSetMeta) HasSupportsSnapshot() bool {
	if o != nil && !IsNil(o.SupportsSnapshot) {
		return true
	}

	return false
}

// SetSupportsSnapshot gets a reference to the given bool and assigns it to the SupportsSnapshot field.
func (o *CommonsSetMeta) SetSupportsSnapshot(v bool) {
	o.SupportsSnapshot = &v
}

func (o CommonsSetMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsSetMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SupportsSnapshot) {
		toSerialize["supports_snapshot"] = o.SupportsSnapshot
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsSetMeta) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsSetMeta := _CommonsSetMeta{}

	err = json.Unmarshal(bytes, &varCommonsSetMeta)

	if err != nil {
		return err
	}

	*o = CommonsSetMeta(varCommonsSetMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "supports_snapshot")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsSetMeta struct {
	value *CommonsSetMeta
	isSet bool
}

func (v NullableCommonsSetMeta) Get() *CommonsSetMeta {
	return v.value
}

func (v *NullableCommonsSetMeta) Set(val *CommonsSetMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsSetMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsSetMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsSetMeta(val *CommonsSetMeta) *NullableCommonsSetMeta {
	return &NullableCommonsSetMeta{value: val, isSet: true}
}

func (v NullableCommonsSetMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsSetMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


