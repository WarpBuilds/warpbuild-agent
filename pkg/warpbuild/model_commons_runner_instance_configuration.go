/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRunnerInstanceConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRunnerInstanceConfiguration{}

// CommonsRunnerInstanceConfiguration struct for CommonsRunnerInstanceConfiguration
type CommonsRunnerInstanceConfiguration struct {
	ByocSku *CommonsByocSku `json:"byoc_sku,omitempty"`
	CapacityType *string `json:"capacity_type,omitempty"`
	Image *string `json:"image,omitempty"`
	Sku *CommonsInstanceSku `json:"sku,omitempty"`
	StockRunnerSetId *string `json:"stock_runner_set_id,omitempty"`
	Storage *CommonsStorage `json:"storage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRunnerInstanceConfiguration CommonsRunnerInstanceConfiguration

// NewCommonsRunnerInstanceConfiguration instantiates a new CommonsRunnerInstanceConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRunnerInstanceConfiguration() *CommonsRunnerInstanceConfiguration {
	this := CommonsRunnerInstanceConfiguration{}
	return &this
}

// NewCommonsRunnerInstanceConfigurationWithDefaults instantiates a new CommonsRunnerInstanceConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRunnerInstanceConfigurationWithDefaults() *CommonsRunnerInstanceConfiguration {
	this := CommonsRunnerInstanceConfiguration{}
	return &this
}

// GetByocSku returns the ByocSku field value if set, zero value otherwise.
func (o *CommonsRunnerInstanceConfiguration) GetByocSku() CommonsByocSku {
	if o == nil || IsNil(o.ByocSku) {
		var ret CommonsByocSku
		return ret
	}
	return *o.ByocSku
}

// GetByocSkuOk returns a tuple with the ByocSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstanceConfiguration) GetByocSkuOk() (*CommonsByocSku, bool) {
	if o == nil || IsNil(o.ByocSku) {
		return nil, false
	}
	return o.ByocSku, true
}

// HasByocSku returns a boolean if a field has been set.
func (o *CommonsRunnerInstanceConfiguration) HasByocSku() bool {
	if o != nil && !IsNil(o.ByocSku) {
		return true
	}

	return false
}

// SetByocSku gets a reference to the given CommonsByocSku and assigns it to the ByocSku field.
func (o *CommonsRunnerInstanceConfiguration) SetByocSku(v CommonsByocSku) {
	o.ByocSku = &v
}

// GetCapacityType returns the CapacityType field value if set, zero value otherwise.
func (o *CommonsRunnerInstanceConfiguration) GetCapacityType() string {
	if o == nil || IsNil(o.CapacityType) {
		var ret string
		return ret
	}
	return *o.CapacityType
}

// GetCapacityTypeOk returns a tuple with the CapacityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstanceConfiguration) GetCapacityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CapacityType) {
		return nil, false
	}
	return o.CapacityType, true
}

// HasCapacityType returns a boolean if a field has been set.
func (o *CommonsRunnerInstanceConfiguration) HasCapacityType() bool {
	if o != nil && !IsNil(o.CapacityType) {
		return true
	}

	return false
}

// SetCapacityType gets a reference to the given string and assigns it to the CapacityType field.
func (o *CommonsRunnerInstanceConfiguration) SetCapacityType(v string) {
	o.CapacityType = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CommonsRunnerInstanceConfiguration) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstanceConfiguration) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CommonsRunnerInstanceConfiguration) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *CommonsRunnerInstanceConfiguration) SetImage(v string) {
	o.Image = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *CommonsRunnerInstanceConfiguration) GetSku() CommonsInstanceSku {
	if o == nil || IsNil(o.Sku) {
		var ret CommonsInstanceSku
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstanceConfiguration) GetSkuOk() (*CommonsInstanceSku, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *CommonsRunnerInstanceConfiguration) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given CommonsInstanceSku and assigns it to the Sku field.
func (o *CommonsRunnerInstanceConfiguration) SetSku(v CommonsInstanceSku) {
	o.Sku = &v
}

// GetStockRunnerSetId returns the StockRunnerSetId field value if set, zero value otherwise.
func (o *CommonsRunnerInstanceConfiguration) GetStockRunnerSetId() string {
	if o == nil || IsNil(o.StockRunnerSetId) {
		var ret string
		return ret
	}
	return *o.StockRunnerSetId
}

// GetStockRunnerSetIdOk returns a tuple with the StockRunnerSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstanceConfiguration) GetStockRunnerSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.StockRunnerSetId) {
		return nil, false
	}
	return o.StockRunnerSetId, true
}

// HasStockRunnerSetId returns a boolean if a field has been set.
func (o *CommonsRunnerInstanceConfiguration) HasStockRunnerSetId() bool {
	if o != nil && !IsNil(o.StockRunnerSetId) {
		return true
	}

	return false
}

// SetStockRunnerSetId gets a reference to the given string and assigns it to the StockRunnerSetId field.
func (o *CommonsRunnerInstanceConfiguration) SetStockRunnerSetId(v string) {
	o.StockRunnerSetId = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *CommonsRunnerInstanceConfiguration) GetStorage() CommonsStorage {
	if o == nil || IsNil(o.Storage) {
		var ret CommonsStorage
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInstanceConfiguration) GetStorageOk() (*CommonsStorage, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *CommonsRunnerInstanceConfiguration) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given CommonsStorage and assigns it to the Storage field.
func (o *CommonsRunnerInstanceConfiguration) SetStorage(v CommonsStorage) {
	o.Storage = &v
}

func (o CommonsRunnerInstanceConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRunnerInstanceConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ByocSku) {
		toSerialize["byoc_sku"] = o.ByocSku
	}
	if !IsNil(o.CapacityType) {
		toSerialize["capacity_type"] = o.CapacityType
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.StockRunnerSetId) {
		toSerialize["stock_runner_set_id"] = o.StockRunnerSetId
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRunnerInstanceConfiguration) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRunnerInstanceConfiguration := _CommonsRunnerInstanceConfiguration{}

	err = json.Unmarshal(bytes, &varCommonsRunnerInstanceConfiguration)

	if err != nil {
		return err
	}

	*o = CommonsRunnerInstanceConfiguration(varCommonsRunnerInstanceConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "byoc_sku")
		delete(additionalProperties, "capacity_type")
		delete(additionalProperties, "image")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "stock_runner_set_id")
		delete(additionalProperties, "storage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRunnerInstanceConfiguration struct {
	value *CommonsRunnerInstanceConfiguration
	isSet bool
}

func (v NullableCommonsRunnerInstanceConfiguration) Get() *CommonsRunnerInstanceConfiguration {
	return v.value
}

func (v *NullableCommonsRunnerInstanceConfiguration) Set(val *CommonsRunnerInstanceConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRunnerInstanceConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRunnerInstanceConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRunnerInstanceConfiguration(val *CommonsRunnerInstanceConfiguration) *NullableCommonsRunnerInstanceConfiguration {
	return &NullableCommonsRunnerInstanceConfiguration{value: val, isSet: true}
}

func (v NullableCommonsRunnerInstanceConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRunnerInstanceConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


