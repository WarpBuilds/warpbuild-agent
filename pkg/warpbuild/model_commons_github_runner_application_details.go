/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsGithubRunnerApplicationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsGithubRunnerApplicationDetails{}

// CommonsGithubRunnerApplicationDetails struct for CommonsGithubRunnerApplicationDetails
type CommonsGithubRunnerApplicationDetails struct {
	Jit *string `json:"jit,omitempty"`
	Labels []string `json:"labels,omitempty"`
	RunnerName *string `json:"runner_name,omitempty"`
	Variables *map[string]string `json:"variables,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsGithubRunnerApplicationDetails CommonsGithubRunnerApplicationDetails

// NewCommonsGithubRunnerApplicationDetails instantiates a new CommonsGithubRunnerApplicationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsGithubRunnerApplicationDetails() *CommonsGithubRunnerApplicationDetails {
	this := CommonsGithubRunnerApplicationDetails{}
	return &this
}

// NewCommonsGithubRunnerApplicationDetailsWithDefaults instantiates a new CommonsGithubRunnerApplicationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsGithubRunnerApplicationDetailsWithDefaults() *CommonsGithubRunnerApplicationDetails {
	this := CommonsGithubRunnerApplicationDetails{}
	return &this
}

// GetJit returns the Jit field value if set, zero value otherwise.
func (o *CommonsGithubRunnerApplicationDetails) GetJit() string {
	if o == nil || IsNil(o.Jit) {
		var ret string
		return ret
	}
	return *o.Jit
}

// GetJitOk returns a tuple with the Jit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsGithubRunnerApplicationDetails) GetJitOk() (*string, bool) {
	if o == nil || IsNil(o.Jit) {
		return nil, false
	}
	return o.Jit, true
}

// HasJit returns a boolean if a field has been set.
func (o *CommonsGithubRunnerApplicationDetails) HasJit() bool {
	if o != nil && !IsNil(o.Jit) {
		return true
	}

	return false
}

// SetJit gets a reference to the given string and assigns it to the Jit field.
func (o *CommonsGithubRunnerApplicationDetails) SetJit(v string) {
	o.Jit = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CommonsGithubRunnerApplicationDetails) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsGithubRunnerApplicationDetails) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CommonsGithubRunnerApplicationDetails) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CommonsGithubRunnerApplicationDetails) SetLabels(v []string) {
	o.Labels = v
}

// GetRunnerName returns the RunnerName field value if set, zero value otherwise.
func (o *CommonsGithubRunnerApplicationDetails) GetRunnerName() string {
	if o == nil || IsNil(o.RunnerName) {
		var ret string
		return ret
	}
	return *o.RunnerName
}

// GetRunnerNameOk returns a tuple with the RunnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsGithubRunnerApplicationDetails) GetRunnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerName) {
		return nil, false
	}
	return o.RunnerName, true
}

// HasRunnerName returns a boolean if a field has been set.
func (o *CommonsGithubRunnerApplicationDetails) HasRunnerName() bool {
	if o != nil && !IsNil(o.RunnerName) {
		return true
	}

	return false
}

// SetRunnerName gets a reference to the given string and assigns it to the RunnerName field.
func (o *CommonsGithubRunnerApplicationDetails) SetRunnerName(v string) {
	o.RunnerName = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *CommonsGithubRunnerApplicationDetails) GetVariables() map[string]string {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]string
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsGithubRunnerApplicationDetails) GetVariablesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *CommonsGithubRunnerApplicationDetails) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]string and assigns it to the Variables field.
func (o *CommonsGithubRunnerApplicationDetails) SetVariables(v map[string]string) {
	o.Variables = &v
}

func (o CommonsGithubRunnerApplicationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsGithubRunnerApplicationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jit) {
		toSerialize["jit"] = o.Jit
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.RunnerName) {
		toSerialize["runner_name"] = o.RunnerName
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsGithubRunnerApplicationDetails) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsGithubRunnerApplicationDetails := _CommonsGithubRunnerApplicationDetails{}

	err = json.Unmarshal(bytes, &varCommonsGithubRunnerApplicationDetails)

	if err != nil {
		return err
	}

	*o = CommonsGithubRunnerApplicationDetails(varCommonsGithubRunnerApplicationDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "jit")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "runner_name")
		delete(additionalProperties, "variables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsGithubRunnerApplicationDetails struct {
	value *CommonsGithubRunnerApplicationDetails
	isSet bool
}

func (v NullableCommonsGithubRunnerApplicationDetails) Get() *CommonsGithubRunnerApplicationDetails {
	return v.value
}

func (v *NullableCommonsGithubRunnerApplicationDetails) Set(val *CommonsGithubRunnerApplicationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsGithubRunnerApplicationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsGithubRunnerApplicationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsGithubRunnerApplicationDetails(val *CommonsGithubRunnerApplicationDetails) *NullableCommonsGithubRunnerApplicationDetails {
	return &NullableCommonsGithubRunnerApplicationDetails{value: val, isSet: true}
}

func (v NullableCommonsGithubRunnerApplicationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsGithubRunnerApplicationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


