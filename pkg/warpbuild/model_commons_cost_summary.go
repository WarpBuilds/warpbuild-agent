/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsCostSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsCostSummary{}

// CommonsCostSummary struct for CommonsCostSummary
type CommonsCostSummary struct {
	Cache *CommonsCacheCostSummary `json:"cache,omitempty"`
	Runners *CommonsRunnersCostSummary `json:"runners,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsCostSummary CommonsCostSummary

// NewCommonsCostSummary instantiates a new CommonsCostSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsCostSummary() *CommonsCostSummary {
	this := CommonsCostSummary{}
	return &this
}

// NewCommonsCostSummaryWithDefaults instantiates a new CommonsCostSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsCostSummaryWithDefaults() *CommonsCostSummary {
	this := CommonsCostSummary{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *CommonsCostSummary) GetCache() CommonsCacheCostSummary {
	if o == nil || IsNil(o.Cache) {
		var ret CommonsCacheCostSummary
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCostSummary) GetCacheOk() (*CommonsCacheCostSummary, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *CommonsCostSummary) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given CommonsCacheCostSummary and assigns it to the Cache field.
func (o *CommonsCostSummary) SetCache(v CommonsCacheCostSummary) {
	o.Cache = &v
}

// GetRunners returns the Runners field value if set, zero value otherwise.
func (o *CommonsCostSummary) GetRunners() CommonsRunnersCostSummary {
	if o == nil || IsNil(o.Runners) {
		var ret CommonsRunnersCostSummary
		return ret
	}
	return *o.Runners
}

// GetRunnersOk returns a tuple with the Runners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCostSummary) GetRunnersOk() (*CommonsRunnersCostSummary, bool) {
	if o == nil || IsNil(o.Runners) {
		return nil, false
	}
	return o.Runners, true
}

// HasRunners returns a boolean if a field has been set.
func (o *CommonsCostSummary) HasRunners() bool {
	if o != nil && !IsNil(o.Runners) {
		return true
	}

	return false
}

// SetRunners gets a reference to the given CommonsRunnersCostSummary and assigns it to the Runners field.
func (o *CommonsCostSummary) SetRunners(v CommonsRunnersCostSummary) {
	o.Runners = &v
}

func (o CommonsCostSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsCostSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.Runners) {
		toSerialize["runners"] = o.Runners
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsCostSummary) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsCostSummary := _CommonsCostSummary{}

	err = json.Unmarshal(bytes, &varCommonsCostSummary)

	if err != nil {
		return err
	}

	*o = CommonsCostSummary(varCommonsCostSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "cache")
		delete(additionalProperties, "runners")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsCostSummary struct {
	value *CommonsCostSummary
	isSet bool
}

func (v NullableCommonsCostSummary) Get() *CommonsCostSummary {
	return v.value
}

func (v *NullableCommonsCostSummary) Set(val *CommonsCostSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsCostSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsCostSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsCostSummary(val *CommonsCostSummary) *NullableCommonsCostSummary {
	return &NullableCommonsCostSummary{value: val, isSet: true}
}

func (v NullableCommonsCostSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsCostSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


