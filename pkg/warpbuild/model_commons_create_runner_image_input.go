/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsCreateRunnerImageInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsCreateRunnerImageInput{}

// CommonsCreateRunnerImageInput struct for CommonsCreateRunnerImageInput
type CommonsCreateRunnerImageInput struct {
	Alias *string `json:"alias,omitempty"`
	Arch *string `json:"arch,omitempty"`
	ContainerRunnerImage *CommonsContainerRunnerImage `json:"container_runner_image,omitempty"`
	Hooks []CommonsRunnerImageHook `json:"hooks,omitempty"`
	Os *string `json:"os,omitempty"`
	RunnerImagePullSecretId *string `json:"runner_image_pull_secret_id,omitempty"`
	Settings *CommonsRunnerImageSettings `json:"settings,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsCreateRunnerImageInput CommonsCreateRunnerImageInput

// NewCommonsCreateRunnerImageInput instantiates a new CommonsCreateRunnerImageInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsCreateRunnerImageInput() *CommonsCreateRunnerImageInput {
	this := CommonsCreateRunnerImageInput{}
	return &this
}

// NewCommonsCreateRunnerImageInputWithDefaults instantiates a new CommonsCreateRunnerImageInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsCreateRunnerImageInputWithDefaults() *CommonsCreateRunnerImageInput {
	this := CommonsCreateRunnerImageInput{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *CommonsCreateRunnerImageInput) SetAlias(v string) {
	o.Alias = &v
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetArch() string {
	if o == nil || IsNil(o.Arch) {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetArchOk() (*string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CommonsCreateRunnerImageInput) SetArch(v string) {
	o.Arch = &v
}

// GetContainerRunnerImage returns the ContainerRunnerImage field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetContainerRunnerImage() CommonsContainerRunnerImage {
	if o == nil || IsNil(o.ContainerRunnerImage) {
		var ret CommonsContainerRunnerImage
		return ret
	}
	return *o.ContainerRunnerImage
}

// GetContainerRunnerImageOk returns a tuple with the ContainerRunnerImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetContainerRunnerImageOk() (*CommonsContainerRunnerImage, bool) {
	if o == nil || IsNil(o.ContainerRunnerImage) {
		return nil, false
	}
	return o.ContainerRunnerImage, true
}

// HasContainerRunnerImage returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasContainerRunnerImage() bool {
	if o != nil && !IsNil(o.ContainerRunnerImage) {
		return true
	}

	return false
}

// SetContainerRunnerImage gets a reference to the given CommonsContainerRunnerImage and assigns it to the ContainerRunnerImage field.
func (o *CommonsCreateRunnerImageInput) SetContainerRunnerImage(v CommonsContainerRunnerImage) {
	o.ContainerRunnerImage = &v
}

// GetHooks returns the Hooks field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetHooks() []CommonsRunnerImageHook {
	if o == nil || IsNil(o.Hooks) {
		var ret []CommonsRunnerImageHook
		return ret
	}
	return o.Hooks
}

// GetHooksOk returns a tuple with the Hooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetHooksOk() ([]CommonsRunnerImageHook, bool) {
	if o == nil || IsNil(o.Hooks) {
		return nil, false
	}
	return o.Hooks, true
}

// HasHooks returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasHooks() bool {
	if o != nil && !IsNil(o.Hooks) {
		return true
	}

	return false
}

// SetHooks gets a reference to the given []CommonsRunnerImageHook and assigns it to the Hooks field.
func (o *CommonsCreateRunnerImageInput) SetHooks(v []CommonsRunnerImageHook) {
	o.Hooks = v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *CommonsCreateRunnerImageInput) SetOs(v string) {
	o.Os = &v
}

// GetRunnerImagePullSecretId returns the RunnerImagePullSecretId field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetRunnerImagePullSecretId() string {
	if o == nil || IsNil(o.RunnerImagePullSecretId) {
		var ret string
		return ret
	}
	return *o.RunnerImagePullSecretId
}

// GetRunnerImagePullSecretIdOk returns a tuple with the RunnerImagePullSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetRunnerImagePullSecretIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerImagePullSecretId) {
		return nil, false
	}
	return o.RunnerImagePullSecretId, true
}

// HasRunnerImagePullSecretId returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasRunnerImagePullSecretId() bool {
	if o != nil && !IsNil(o.RunnerImagePullSecretId) {
		return true
	}

	return false
}

// SetRunnerImagePullSecretId gets a reference to the given string and assigns it to the RunnerImagePullSecretId field.
func (o *CommonsCreateRunnerImageInput) SetRunnerImagePullSecretId(v string) {
	o.RunnerImagePullSecretId = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetSettings() CommonsRunnerImageSettings {
	if o == nil || IsNil(o.Settings) {
		var ret CommonsRunnerImageSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetSettingsOk() (*CommonsRunnerImageSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given CommonsRunnerImageSettings and assigns it to the Settings field.
func (o *CommonsCreateRunnerImageInput) SetSettings(v CommonsRunnerImageSettings) {
	o.Settings = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommonsCreateRunnerImageInput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsCreateRunnerImageInput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommonsCreateRunnerImageInput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommonsCreateRunnerImageInput) SetType(v string) {
	o.Type = &v
}

func (o CommonsCreateRunnerImageInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsCreateRunnerImageInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.ContainerRunnerImage) {
		toSerialize["container_runner_image"] = o.ContainerRunnerImage
	}
	if !IsNil(o.Hooks) {
		toSerialize["hooks"] = o.Hooks
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.RunnerImagePullSecretId) {
		toSerialize["runner_image_pull_secret_id"] = o.RunnerImagePullSecretId
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsCreateRunnerImageInput) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsCreateRunnerImageInput := _CommonsCreateRunnerImageInput{}

	err = json.Unmarshal(bytes, &varCommonsCreateRunnerImageInput)

	if err != nil {
		return err
	}

	*o = CommonsCreateRunnerImageInput(varCommonsCreateRunnerImageInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "alias")
		delete(additionalProperties, "arch")
		delete(additionalProperties, "container_runner_image")
		delete(additionalProperties, "hooks")
		delete(additionalProperties, "os")
		delete(additionalProperties, "runner_image_pull_secret_id")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsCreateRunnerImageInput struct {
	value *CommonsCreateRunnerImageInput
	isSet bool
}

func (v NullableCommonsCreateRunnerImageInput) Get() *CommonsCreateRunnerImageInput {
	return v.value
}

func (v *NullableCommonsCreateRunnerImageInput) Set(val *CommonsCreateRunnerImageInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsCreateRunnerImageInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsCreateRunnerImageInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsCreateRunnerImageInput(val *CommonsCreateRunnerImageInput) *NullableCommonsCreateRunnerImageInput {
	return &NullableCommonsCreateRunnerImageInput{value: val, isSet: true}
}

func (v NullableCommonsCreateRunnerImageInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsCreateRunnerImageInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


