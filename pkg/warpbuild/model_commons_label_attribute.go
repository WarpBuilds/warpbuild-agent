/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsLabelAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsLabelAttribute{}

// CommonsLabelAttribute struct for CommonsLabelAttribute
type CommonsLabelAttribute struct {
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	Runner *string `json:"runner,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsLabelAttribute CommonsLabelAttribute

// NewCommonsLabelAttribute instantiates a new CommonsLabelAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsLabelAttribute() *CommonsLabelAttribute {
	this := CommonsLabelAttribute{}
	return &this
}

// NewCommonsLabelAttributeWithDefaults instantiates a new CommonsLabelAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsLabelAttributeWithDefaults() *CommonsLabelAttribute {
	this := CommonsLabelAttribute{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CommonsLabelAttribute) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsLabelAttribute) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CommonsLabelAttribute) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *CommonsLabelAttribute) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetRunner returns the Runner field value if set, zero value otherwise.
func (o *CommonsLabelAttribute) GetRunner() string {
	if o == nil || IsNil(o.Runner) {
		var ret string
		return ret
	}
	return *o.Runner
}

// GetRunnerOk returns a tuple with the Runner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsLabelAttribute) GetRunnerOk() (*string, bool) {
	if o == nil || IsNil(o.Runner) {
		return nil, false
	}
	return o.Runner, true
}

// HasRunner returns a boolean if a field has been set.
func (o *CommonsLabelAttribute) HasRunner() bool {
	if o != nil && !IsNil(o.Runner) {
		return true
	}

	return false
}

// SetRunner gets a reference to the given string and assigns it to the Runner field.
func (o *CommonsLabelAttribute) SetRunner(v string) {
	o.Runner = &v
}

func (o CommonsLabelAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsLabelAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Runner) {
		toSerialize["runner"] = o.Runner
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsLabelAttribute) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsLabelAttribute := _CommonsLabelAttribute{}

	err = json.Unmarshal(bytes, &varCommonsLabelAttribute)

	if err != nil {
		return err
	}

	*o = CommonsLabelAttribute(varCommonsLabelAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "runner")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsLabelAttribute struct {
	value *CommonsLabelAttribute
	isSet bool
}

func (v NullableCommonsLabelAttribute) Get() *CommonsLabelAttribute {
	return v.value
}

func (v *NullableCommonsLabelAttribute) Set(val *CommonsLabelAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsLabelAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsLabelAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsLabelAttribute(val *CommonsLabelAttribute) *NullableCommonsLabelAttribute {
	return &NullableCommonsLabelAttribute{value: val, isSet: true}
}

func (v NullableCommonsLabelAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsLabelAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


