/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRunnersUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRunnersUsage{}

// CommonsRunnersUsage struct for CommonsRunnersUsage
type CommonsRunnersUsage struct {
	Daywise []CommonsDaywiseRuntime `json:"daywise,omitempty"`
	Runnerwise []CommonsRunnerwiseRuntime `json:"runnerwise,omitempty"`
	TotalJobCount *int32 `json:"total_job_count,omitempty"`
	TotalRuntimeSeconds *int32 `json:"total_runtime_seconds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRunnersUsage CommonsRunnersUsage

// NewCommonsRunnersUsage instantiates a new CommonsRunnersUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRunnersUsage() *CommonsRunnersUsage {
	this := CommonsRunnersUsage{}
	return &this
}

// NewCommonsRunnersUsageWithDefaults instantiates a new CommonsRunnersUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRunnersUsageWithDefaults() *CommonsRunnersUsage {
	this := CommonsRunnersUsage{}
	return &this
}

// GetDaywise returns the Daywise field value if set, zero value otherwise.
func (o *CommonsRunnersUsage) GetDaywise() []CommonsDaywiseRuntime {
	if o == nil || IsNil(o.Daywise) {
		var ret []CommonsDaywiseRuntime
		return ret
	}
	return o.Daywise
}

// GetDaywiseOk returns a tuple with the Daywise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnersUsage) GetDaywiseOk() ([]CommonsDaywiseRuntime, bool) {
	if o == nil || IsNil(o.Daywise) {
		return nil, false
	}
	return o.Daywise, true
}

// HasDaywise returns a boolean if a field has been set.
func (o *CommonsRunnersUsage) HasDaywise() bool {
	if o != nil && !IsNil(o.Daywise) {
		return true
	}

	return false
}

// SetDaywise gets a reference to the given []CommonsDaywiseRuntime and assigns it to the Daywise field.
func (o *CommonsRunnersUsage) SetDaywise(v []CommonsDaywiseRuntime) {
	o.Daywise = v
}

// GetRunnerwise returns the Runnerwise field value if set, zero value otherwise.
func (o *CommonsRunnersUsage) GetRunnerwise() []CommonsRunnerwiseRuntime {
	if o == nil || IsNil(o.Runnerwise) {
		var ret []CommonsRunnerwiseRuntime
		return ret
	}
	return o.Runnerwise
}

// GetRunnerwiseOk returns a tuple with the Runnerwise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnersUsage) GetRunnerwiseOk() ([]CommonsRunnerwiseRuntime, bool) {
	if o == nil || IsNil(o.Runnerwise) {
		return nil, false
	}
	return o.Runnerwise, true
}

// HasRunnerwise returns a boolean if a field has been set.
func (o *CommonsRunnersUsage) HasRunnerwise() bool {
	if o != nil && !IsNil(o.Runnerwise) {
		return true
	}

	return false
}

// SetRunnerwise gets a reference to the given []CommonsRunnerwiseRuntime and assigns it to the Runnerwise field.
func (o *CommonsRunnersUsage) SetRunnerwise(v []CommonsRunnerwiseRuntime) {
	o.Runnerwise = v
}

// GetTotalJobCount returns the TotalJobCount field value if set, zero value otherwise.
func (o *CommonsRunnersUsage) GetTotalJobCount() int32 {
	if o == nil || IsNil(o.TotalJobCount) {
		var ret int32
		return ret
	}
	return *o.TotalJobCount
}

// GetTotalJobCountOk returns a tuple with the TotalJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnersUsage) GetTotalJobCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalJobCount) {
		return nil, false
	}
	return o.TotalJobCount, true
}

// HasTotalJobCount returns a boolean if a field has been set.
func (o *CommonsRunnersUsage) HasTotalJobCount() bool {
	if o != nil && !IsNil(o.TotalJobCount) {
		return true
	}

	return false
}

// SetTotalJobCount gets a reference to the given int32 and assigns it to the TotalJobCount field.
func (o *CommonsRunnersUsage) SetTotalJobCount(v int32) {
	o.TotalJobCount = &v
}

// GetTotalRuntimeSeconds returns the TotalRuntimeSeconds field value if set, zero value otherwise.
func (o *CommonsRunnersUsage) GetTotalRuntimeSeconds() int32 {
	if o == nil || IsNil(o.TotalRuntimeSeconds) {
		var ret int32
		return ret
	}
	return *o.TotalRuntimeSeconds
}

// GetTotalRuntimeSecondsOk returns a tuple with the TotalRuntimeSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnersUsage) GetTotalRuntimeSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRuntimeSeconds) {
		return nil, false
	}
	return o.TotalRuntimeSeconds, true
}

// HasTotalRuntimeSeconds returns a boolean if a field has been set.
func (o *CommonsRunnersUsage) HasTotalRuntimeSeconds() bool {
	if o != nil && !IsNil(o.TotalRuntimeSeconds) {
		return true
	}

	return false
}

// SetTotalRuntimeSeconds gets a reference to the given int32 and assigns it to the TotalRuntimeSeconds field.
func (o *CommonsRunnersUsage) SetTotalRuntimeSeconds(v int32) {
	o.TotalRuntimeSeconds = &v
}

func (o CommonsRunnersUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRunnersUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Daywise) {
		toSerialize["daywise"] = o.Daywise
	}
	if !IsNil(o.Runnerwise) {
		toSerialize["runnerwise"] = o.Runnerwise
	}
	if !IsNil(o.TotalJobCount) {
		toSerialize["total_job_count"] = o.TotalJobCount
	}
	if !IsNil(o.TotalRuntimeSeconds) {
		toSerialize["total_runtime_seconds"] = o.TotalRuntimeSeconds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRunnersUsage) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRunnersUsage := _CommonsRunnersUsage{}

	err = json.Unmarshal(bytes, &varCommonsRunnersUsage)

	if err != nil {
		return err
	}

	*o = CommonsRunnersUsage(varCommonsRunnersUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "daywise")
		delete(additionalProperties, "runnerwise")
		delete(additionalProperties, "total_job_count")
		delete(additionalProperties, "total_runtime_seconds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRunnersUsage struct {
	value *CommonsRunnersUsage
	isSet bool
}

func (v NullableCommonsRunnersUsage) Get() *CommonsRunnersUsage {
	return v.value
}

func (v *NullableCommonsRunnersUsage) Set(val *CommonsRunnersUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRunnersUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRunnersUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRunnersUsage(val *CommonsRunnersUsage) *NullableCommonsRunnersUsage {
	return &NullableCommonsRunnersUsage{value: val, isSet: true}
}

func (v NullableCommonsRunnersUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRunnersUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


