/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRunnerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRunnerInfo{}

// CommonsRunnerInfo struct for CommonsRunnerInfo
type CommonsRunnerInfo struct {
	Arch *string `json:"arch,omitempty"`
	Host *string `json:"host,omitempty"`
	Os *string `json:"os,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRunnerInfo CommonsRunnerInfo

// NewCommonsRunnerInfo instantiates a new CommonsRunnerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRunnerInfo() *CommonsRunnerInfo {
	this := CommonsRunnerInfo{}
	return &this
}

// NewCommonsRunnerInfoWithDefaults instantiates a new CommonsRunnerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRunnerInfoWithDefaults() *CommonsRunnerInfo {
	this := CommonsRunnerInfo{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CommonsRunnerInfo) GetArch() string {
	if o == nil || IsNil(o.Arch) {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInfo) GetArchOk() (*string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CommonsRunnerInfo) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CommonsRunnerInfo) SetArch(v string) {
	o.Arch = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *CommonsRunnerInfo) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInfo) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *CommonsRunnerInfo) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *CommonsRunnerInfo) SetHost(v string) {
	o.Host = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *CommonsRunnerInfo) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerInfo) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *CommonsRunnerInfo) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *CommonsRunnerInfo) SetOs(v string) {
	o.Os = &v
}

func (o CommonsRunnerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRunnerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRunnerInfo) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRunnerInfo := _CommonsRunnerInfo{}

	err = json.Unmarshal(bytes, &varCommonsRunnerInfo)

	if err != nil {
		return err
	}

	*o = CommonsRunnerInfo(varCommonsRunnerInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "arch")
		delete(additionalProperties, "host")
		delete(additionalProperties, "os")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRunnerInfo struct {
	value *CommonsRunnerInfo
	isSet bool
}

func (v NullableCommonsRunnerInfo) Get() *CommonsRunnerInfo {
	return v.value
}

func (v *NullableCommonsRunnerInfo) Set(val *CommonsRunnerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRunnerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRunnerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRunnerInfo(val *CommonsRunnerInfo) *NullableCommonsRunnerInfo {
	return &NullableCommonsRunnerInfo{value: val, isSet: true}
}

func (v NullableCommonsRunnerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRunnerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


