/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsLabelAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsLabelAttributes{}

// CommonsLabelAttributes struct for CommonsLabelAttributes
type CommonsLabelAttributes struct {
	AttributesArr []CommonsLabelAttribute `json:"attributes_arr,omitempty"`
	ParsedLabels []string `json:"parsed_labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsLabelAttributes CommonsLabelAttributes

// NewCommonsLabelAttributes instantiates a new CommonsLabelAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsLabelAttributes() *CommonsLabelAttributes {
	this := CommonsLabelAttributes{}
	return &this
}

// NewCommonsLabelAttributesWithDefaults instantiates a new CommonsLabelAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsLabelAttributesWithDefaults() *CommonsLabelAttributes {
	this := CommonsLabelAttributes{}
	return &this
}

// GetAttributesArr returns the AttributesArr field value if set, zero value otherwise.
func (o *CommonsLabelAttributes) GetAttributesArr() []CommonsLabelAttribute {
	if o == nil || IsNil(o.AttributesArr) {
		var ret []CommonsLabelAttribute
		return ret
	}
	return o.AttributesArr
}

// GetAttributesArrOk returns a tuple with the AttributesArr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsLabelAttributes) GetAttributesArrOk() ([]CommonsLabelAttribute, bool) {
	if o == nil || IsNil(o.AttributesArr) {
		return nil, false
	}
	return o.AttributesArr, true
}

// HasAttributesArr returns a boolean if a field has been set.
func (o *CommonsLabelAttributes) HasAttributesArr() bool {
	if o != nil && !IsNil(o.AttributesArr) {
		return true
	}

	return false
}

// SetAttributesArr gets a reference to the given []CommonsLabelAttribute and assigns it to the AttributesArr field.
func (o *CommonsLabelAttributes) SetAttributesArr(v []CommonsLabelAttribute) {
	o.AttributesArr = v
}

// GetParsedLabels returns the ParsedLabels field value if set, zero value otherwise.
func (o *CommonsLabelAttributes) GetParsedLabels() []string {
	if o == nil || IsNil(o.ParsedLabels) {
		var ret []string
		return ret
	}
	return o.ParsedLabels
}

// GetParsedLabelsOk returns a tuple with the ParsedLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsLabelAttributes) GetParsedLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.ParsedLabels) {
		return nil, false
	}
	return o.ParsedLabels, true
}

// HasParsedLabels returns a boolean if a field has been set.
func (o *CommonsLabelAttributes) HasParsedLabels() bool {
	if o != nil && !IsNil(o.ParsedLabels) {
		return true
	}

	return false
}

// SetParsedLabels gets a reference to the given []string and assigns it to the ParsedLabels field.
func (o *CommonsLabelAttributes) SetParsedLabels(v []string) {
	o.ParsedLabels = v
}

func (o CommonsLabelAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsLabelAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributesArr) {
		toSerialize["attributes_arr"] = o.AttributesArr
	}
	if !IsNil(o.ParsedLabels) {
		toSerialize["parsed_labels"] = o.ParsedLabels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsLabelAttributes) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsLabelAttributes := _CommonsLabelAttributes{}

	err = json.Unmarshal(bytes, &varCommonsLabelAttributes)

	if err != nil {
		return err
	}

	*o = CommonsLabelAttributes(varCommonsLabelAttributes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "attributes_arr")
		delete(additionalProperties, "parsed_labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsLabelAttributes struct {
	value *CommonsLabelAttributes
	isSet bool
}

func (v NullableCommonsLabelAttributes) Get() *CommonsLabelAttributes {
	return v.value
}

func (v *NullableCommonsLabelAttributes) Set(val *CommonsLabelAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsLabelAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsLabelAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsLabelAttributes(val *CommonsLabelAttributes) *NullableCommonsLabelAttributes {
	return &NullableCommonsLabelAttributes{value: val, isSet: true}
}

func (v NullableCommonsLabelAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsLabelAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


