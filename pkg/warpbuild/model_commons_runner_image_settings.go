/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRunnerImageSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRunnerImageSettings{}

// CommonsRunnerImageSettings struct for CommonsRunnerImageSettings
type CommonsRunnerImageSettings struct {
	// PurgeImageVersionsOffset is the number of versions to keep. Each time a new version is created, the oldest version is purged. Allowed values range [1, inf).  Default value is 2.
	PurgeImageVersionsOffset *int32 `json:"purge_image_versions_offset,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRunnerImageSettings CommonsRunnerImageSettings

// NewCommonsRunnerImageSettings instantiates a new CommonsRunnerImageSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRunnerImageSettings() *CommonsRunnerImageSettings {
	this := CommonsRunnerImageSettings{}
	return &this
}

// NewCommonsRunnerImageSettingsWithDefaults instantiates a new CommonsRunnerImageSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRunnerImageSettingsWithDefaults() *CommonsRunnerImageSettings {
	this := CommonsRunnerImageSettings{}
	return &this
}

// GetPurgeImageVersionsOffset returns the PurgeImageVersionsOffset field value if set, zero value otherwise.
func (o *CommonsRunnerImageSettings) GetPurgeImageVersionsOffset() int32 {
	if o == nil || IsNil(o.PurgeImageVersionsOffset) {
		var ret int32
		return ret
	}
	return *o.PurgeImageVersionsOffset
}

// GetPurgeImageVersionsOffsetOk returns a tuple with the PurgeImageVersionsOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRunnerImageSettings) GetPurgeImageVersionsOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.PurgeImageVersionsOffset) {
		return nil, false
	}
	return o.PurgeImageVersionsOffset, true
}

// HasPurgeImageVersionsOffset returns a boolean if a field has been set.
func (o *CommonsRunnerImageSettings) HasPurgeImageVersionsOffset() bool {
	if o != nil && !IsNil(o.PurgeImageVersionsOffset) {
		return true
	}

	return false
}

// SetPurgeImageVersionsOffset gets a reference to the given int32 and assigns it to the PurgeImageVersionsOffset field.
func (o *CommonsRunnerImageSettings) SetPurgeImageVersionsOffset(v int32) {
	o.PurgeImageVersionsOffset = &v
}

func (o CommonsRunnerImageSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRunnerImageSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PurgeImageVersionsOffset) {
		toSerialize["purge_image_versions_offset"] = o.PurgeImageVersionsOffset
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRunnerImageSettings) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRunnerImageSettings := _CommonsRunnerImageSettings{}

	err = json.Unmarshal(bytes, &varCommonsRunnerImageSettings)

	if err != nil {
		return err
	}

	*o = CommonsRunnerImageSettings(varCommonsRunnerImageSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "purge_image_versions_offset")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRunnerImageSettings struct {
	value *CommonsRunnerImageSettings
	isSet bool
}

func (v NullableCommonsRunnerImageSettings) Get() *CommonsRunnerImageSettings {
	return v.value
}

func (v *NullableCommonsRunnerImageSettings) Set(val *CommonsRunnerImageSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRunnerImageSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRunnerImageSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRunnerImageSettings(val *CommonsRunnerImageSettings) *NullableCommonsRunnerImageSettings {
	return &NullableCommonsRunnerImageSettings{value: val, isSet: true}
}

func (v NullableCommonsRunnerImageSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRunnerImageSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


