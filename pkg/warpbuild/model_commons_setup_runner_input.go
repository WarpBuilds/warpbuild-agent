/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsSetupRunnerInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsSetupRunnerInput{}

// CommonsSetupRunnerInput struct for CommonsSetupRunnerInput
type CommonsSetupRunnerInput struct {
	Active *bool `json:"Active,omitempty"`
<<<<<<< HEAD
	Configuration *CommonsRunnerConfiguration `json:"configuration,omitempty"`
	Labels map[string]interface{} `json:"labels,omitempty"`
	Name *string `json:"name,omitempty"`
=======
	Configuration *CommonsRunnerSetConfiguration `json:"configuration,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Name *string `json:"name,omitempty"`
	StockRunnerId *string `json:"stock_runner_id,omitempty"`
>>>>>>> prajjwal-warp-323
	VcsIntegrationId *string `json:"vcs_integration_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsSetupRunnerInput CommonsSetupRunnerInput

// NewCommonsSetupRunnerInput instantiates a new CommonsSetupRunnerInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsSetupRunnerInput() *CommonsSetupRunnerInput {
	this := CommonsSetupRunnerInput{}
	return &this
}

// NewCommonsSetupRunnerInputWithDefaults instantiates a new CommonsSetupRunnerInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsSetupRunnerInputWithDefaults() *CommonsSetupRunnerInput {
	this := CommonsSetupRunnerInput{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CommonsSetupRunnerInput) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsSetupRunnerInput) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CommonsSetupRunnerInput) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CommonsSetupRunnerInput) SetActive(v bool) {
	o.Active = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *CommonsSetupRunnerInput) GetConfiguration() CommonsRunnerConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret CommonsRunnerConfiguration
=======
func (o *CommonsSetupRunnerInput) GetConfiguration() CommonsRunnerSetConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret CommonsRunnerSetConfiguration
>>>>>>> prajjwal-warp-323
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *CommonsSetupRunnerInput) GetConfigurationOk() (*CommonsRunnerConfiguration, bool) {
=======
func (o *CommonsSetupRunnerInput) GetConfigurationOk() (*CommonsRunnerSetConfiguration, bool) {
>>>>>>> prajjwal-warp-323
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *CommonsSetupRunnerInput) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetConfiguration gets a reference to the given CommonsRunnerConfiguration and assigns it to the Configuration field.
func (o *CommonsSetupRunnerInput) SetConfiguration(v CommonsRunnerConfiguration) {
=======
// SetConfiguration gets a reference to the given CommonsRunnerSetConfiguration and assigns it to the Configuration field.
func (o *CommonsSetupRunnerInput) SetConfiguration(v CommonsRunnerSetConfiguration) {
>>>>>>> prajjwal-warp-323
	o.Configuration = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *CommonsSetupRunnerInput) GetLabels() map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]interface{}
=======
func (o *CommonsSetupRunnerInput) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
>>>>>>> prajjwal-warp-323
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *CommonsSetupRunnerInput) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]interface{}{}, false
=======
func (o *CommonsSetupRunnerInput) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
>>>>>>> prajjwal-warp-323
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CommonsSetupRunnerInput) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *CommonsSetupRunnerInput) SetLabels(v map[string]interface{}) {
=======
// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CommonsSetupRunnerInput) SetLabels(v []string) {
>>>>>>> prajjwal-warp-323
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CommonsSetupRunnerInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsSetupRunnerInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CommonsSetupRunnerInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CommonsSetupRunnerInput) SetName(v string) {
	o.Name = &v
}

<<<<<<< HEAD
=======
// GetStockRunnerId returns the StockRunnerId field value if set, zero value otherwise.
func (o *CommonsSetupRunnerInput) GetStockRunnerId() string {
	if o == nil || IsNil(o.StockRunnerId) {
		var ret string
		return ret
	}
	return *o.StockRunnerId
}

// GetStockRunnerIdOk returns a tuple with the StockRunnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsSetupRunnerInput) GetStockRunnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.StockRunnerId) {
		return nil, false
	}
	return o.StockRunnerId, true
}

// HasStockRunnerId returns a boolean if a field has been set.
func (o *CommonsSetupRunnerInput) HasStockRunnerId() bool {
	if o != nil && !IsNil(o.StockRunnerId) {
		return true
	}

	return false
}

// SetStockRunnerId gets a reference to the given string and assigns it to the StockRunnerId field.
func (o *CommonsSetupRunnerInput) SetStockRunnerId(v string) {
	o.StockRunnerId = &v
}

>>>>>>> prajjwal-warp-323
// GetVcsIntegrationId returns the VcsIntegrationId field value if set, zero value otherwise.
func (o *CommonsSetupRunnerInput) GetVcsIntegrationId() string {
	if o == nil || IsNil(o.VcsIntegrationId) {
		var ret string
		return ret
	}
	return *o.VcsIntegrationId
}

// GetVcsIntegrationIdOk returns a tuple with the VcsIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsSetupRunnerInput) GetVcsIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcsIntegrationId) {
		return nil, false
	}
	return o.VcsIntegrationId, true
}

// HasVcsIntegrationId returns a boolean if a field has been set.
func (o *CommonsSetupRunnerInput) HasVcsIntegrationId() bool {
	if o != nil && !IsNil(o.VcsIntegrationId) {
		return true
	}

	return false
}

// SetVcsIntegrationId gets a reference to the given string and assigns it to the VcsIntegrationId field.
func (o *CommonsSetupRunnerInput) SetVcsIntegrationId(v string) {
	o.VcsIntegrationId = &v
}

func (o CommonsSetupRunnerInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsSetupRunnerInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["Active"] = o.Active
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
<<<<<<< HEAD
=======
	if !IsNil(o.StockRunnerId) {
		toSerialize["stock_runner_id"] = o.StockRunnerId
	}
>>>>>>> prajjwal-warp-323
	if !IsNil(o.VcsIntegrationId) {
		toSerialize["vcs_integration_id"] = o.VcsIntegrationId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsSetupRunnerInput) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsSetupRunnerInput := _CommonsSetupRunnerInput{}

<<<<<<< HEAD
	err = json.Unmarshal(bytes, &varCommonsSetupRunnerInput)

	if err != nil {
		return err
	}

	*o = CommonsSetupRunnerInput(varCommonsSetupRunnerInput)

=======
	if err = json.Unmarshal(bytes, &varCommonsSetupRunnerInput); err == nil {
		*o = CommonsSetupRunnerInput(varCommonsSetupRunnerInput)
	}

>>>>>>> prajjwal-warp-323
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Active")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "name")
<<<<<<< HEAD
=======
		delete(additionalProperties, "stock_runner_id")
>>>>>>> prajjwal-warp-323
		delete(additionalProperties, "vcs_integration_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsSetupRunnerInput struct {
	value *CommonsSetupRunnerInput
	isSet bool
}

func (v NullableCommonsSetupRunnerInput) Get() *CommonsSetupRunnerInput {
	return v.value
}

func (v *NullableCommonsSetupRunnerInput) Set(val *CommonsSetupRunnerInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsSetupRunnerInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsSetupRunnerInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsSetupRunnerInput(val *CommonsSetupRunnerInput) *NullableCommonsSetupRunnerInput {
	return &NullableCommonsSetupRunnerInput{value: val, isSet: true}
}

func (v NullableCommonsSetupRunnerInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsSetupRunnerInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


