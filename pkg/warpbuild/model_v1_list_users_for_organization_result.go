/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the V1ListUsersForOrganizationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ListUsersForOrganizationResult{}

// V1ListUsersForOrganizationResult struct for V1ListUsersForOrganizationResult
type V1ListUsersForOrganizationResult struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Email *string `json:"email,omitempty"`
	Id *int32 `json:"id,omitempty"`
	JoinedAt *string `json:"joined_at,omitempty"`
	Name *string `json:"name,omitempty"`
	Role *string `json:"role,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V1ListUsersForOrganizationResult V1ListUsersForOrganizationResult

// NewV1ListUsersForOrganizationResult instantiates a new V1ListUsersForOrganizationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ListUsersForOrganizationResult() *V1ListUsersForOrganizationResult {
	this := V1ListUsersForOrganizationResult{}
	return &this
}

// NewV1ListUsersForOrganizationResultWithDefaults instantiates a new V1ListUsersForOrganizationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ListUsersForOrganizationResultWithDefaults() *V1ListUsersForOrganizationResult {
	this := V1ListUsersForOrganizationResult{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *V1ListUsersForOrganizationResult) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListUsersForOrganizationResult) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *V1ListUsersForOrganizationResult) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *V1ListUsersForOrganizationResult) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *V1ListUsersForOrganizationResult) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListUsersForOrganizationResult) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *V1ListUsersForOrganizationResult) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *V1ListUsersForOrganizationResult) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1ListUsersForOrganizationResult) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListUsersForOrganizationResult) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1ListUsersForOrganizationResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V1ListUsersForOrganizationResult) SetId(v int32) {
	o.Id = &v
}

// GetJoinedAt returns the JoinedAt field value if set, zero value otherwise.
func (o *V1ListUsersForOrganizationResult) GetJoinedAt() string {
	if o == nil || IsNil(o.JoinedAt) {
		var ret string
		return ret
	}
	return *o.JoinedAt
}

// GetJoinedAtOk returns a tuple with the JoinedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListUsersForOrganizationResult) GetJoinedAtOk() (*string, bool) {
	if o == nil || IsNil(o.JoinedAt) {
		return nil, false
	}
	return o.JoinedAt, true
}

// HasJoinedAt returns a boolean if a field has been set.
func (o *V1ListUsersForOrganizationResult) HasJoinedAt() bool {
	if o != nil && !IsNil(o.JoinedAt) {
		return true
	}

	return false
}

// SetJoinedAt gets a reference to the given string and assigns it to the JoinedAt field.
func (o *V1ListUsersForOrganizationResult) SetJoinedAt(v string) {
	o.JoinedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1ListUsersForOrganizationResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListUsersForOrganizationResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1ListUsersForOrganizationResult) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1ListUsersForOrganizationResult) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *V1ListUsersForOrganizationResult) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListUsersForOrganizationResult) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *V1ListUsersForOrganizationResult) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *V1ListUsersForOrganizationResult) SetRole(v string) {
	o.Role = &v
}

func (o V1ListUsersForOrganizationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ListUsersForOrganizationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.JoinedAt) {
		toSerialize["joined_at"] = o.JoinedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1ListUsersForOrganizationResult) UnmarshalJSON(bytes []byte) (err error) {
	varV1ListUsersForOrganizationResult := _V1ListUsersForOrganizationResult{}

<<<<<<< HEAD
	err = json.Unmarshal(bytes, &varV1ListUsersForOrganizationResult)

	if err != nil {
		return err
	}

	*o = V1ListUsersForOrganizationResult(varV1ListUsersForOrganizationResult)

=======
	if err = json.Unmarshal(bytes, &varV1ListUsersForOrganizationResult); err == nil {
		*o = V1ListUsersForOrganizationResult(varV1ListUsersForOrganizationResult)
	}

>>>>>>> prajjwal-warp-323
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "email")
		delete(additionalProperties, "id")
		delete(additionalProperties, "joined_at")
		delete(additionalProperties, "name")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1ListUsersForOrganizationResult struct {
	value *V1ListUsersForOrganizationResult
	isSet bool
}

func (v NullableV1ListUsersForOrganizationResult) Get() *V1ListUsersForOrganizationResult {
	return v.value
}

func (v *NullableV1ListUsersForOrganizationResult) Set(val *V1ListUsersForOrganizationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ListUsersForOrganizationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ListUsersForOrganizationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ListUsersForOrganizationResult(val *V1ListUsersForOrganizationResult) *NullableV1ListUsersForOrganizationResult {
	return &NullableV1ListUsersForOrganizationResult{value: val, isSet: true}
}

func (v NullableV1ListUsersForOrganizationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ListUsersForOrganizationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


