/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsInstanceSku type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsInstanceSku{}

// CommonsInstanceSku struct for CommonsInstanceSku
type CommonsInstanceSku struct {
	Arch *string `json:"arch,omitempty"`
	Cores *int32 `json:"cores,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Id *string `json:"id,omitempty"`
	Memory *int32 `json:"memory,omitempty"`
	Os []string `json:"os,omitempty"`
	Properties *CommonsInstanceSkuProperties `json:"properties,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsInstanceSku CommonsInstanceSku

// NewCommonsInstanceSku instantiates a new CommonsInstanceSku object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsInstanceSku() *CommonsInstanceSku {
	this := CommonsInstanceSku{}
	return &this
}

// NewCommonsInstanceSkuWithDefaults instantiates a new CommonsInstanceSku object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsInstanceSkuWithDefaults() *CommonsInstanceSku {
	this := CommonsInstanceSku{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetArch() string {
	if o == nil || IsNil(o.Arch) {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetArchOk() (*string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CommonsInstanceSku) SetArch(v string) {
	o.Arch = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetCores() int32 {
	if o == nil || IsNil(o.Cores) {
		var ret int32
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetCoresOk() (*int32, bool) {
	if o == nil || IsNil(o.Cores) {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasCores() bool {
	if o != nil && !IsNil(o.Cores) {
		return true
	}

	return false
}

// SetCores gets a reference to the given int32 and assigns it to the Cores field.
func (o *CommonsInstanceSku) SetCores(v int32) {
	o.Cores = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CommonsInstanceSku) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommonsInstanceSku) SetId(v string) {
	o.Id = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *CommonsInstanceSku) SetMemory(v int32) {
	o.Memory = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetOs() []string {
	if o == nil || IsNil(o.Os) {
		var ret []string
		return ret
	}
	return o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetOsOk() ([]string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given []string and assigns it to the Os field.
func (o *CommonsInstanceSku) SetOs(v []string) {
	o.Os = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CommonsInstanceSku) GetProperties() CommonsInstanceSkuProperties {
	if o == nil || IsNil(o.Properties) {
		var ret CommonsInstanceSkuProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsInstanceSku) GetPropertiesOk() (*CommonsInstanceSkuProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CommonsInstanceSku) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given CommonsInstanceSkuProperties and assigns it to the Properties field.
func (o *CommonsInstanceSku) SetProperties(v CommonsInstanceSkuProperties) {
	o.Properties = &v
}

func (o CommonsInstanceSku) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsInstanceSku) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.Cores) {
		toSerialize["cores"] = o.Cores
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsInstanceSku) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsInstanceSku := _CommonsInstanceSku{}

	err = json.Unmarshal(bytes, &varCommonsInstanceSku)

	if err != nil {
		return err
	}

	*o = CommonsInstanceSku(varCommonsInstanceSku)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "arch")
		delete(additionalProperties, "cores")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "id")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "os")
		delete(additionalProperties, "properties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsInstanceSku struct {
	value *CommonsInstanceSku
	isSet bool
}

func (v NullableCommonsInstanceSku) Get() *CommonsInstanceSku {
	return v.value
}

func (v *NullableCommonsInstanceSku) Set(val *CommonsInstanceSku) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsInstanceSku) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsInstanceSku) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsInstanceSku(val *CommonsInstanceSku) *NullableCommonsInstanceSku {
	return &NullableCommonsInstanceSku{value: val, isSet: true}
}

func (v NullableCommonsInstanceSku) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsInstanceSku) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


