/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsUpdateRunnerImageInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsUpdateRunnerImageInput{}

// CommonsUpdateRunnerImageInput struct for CommonsUpdateRunnerImageInput
type CommonsUpdateRunnerImageInput struct {
	ContainerRunnerImage *CommonsContainerRunnerImageUpdate `json:"container_runner_image,omitempty"`
	Hooks []CommonsRunnerImageHook `json:"hooks,omitempty"`
	Id *string `json:"id,omitempty"`
	RunnerImagePullSecretId *string `json:"runner_image_pull_secret_id,omitempty"`
	Settings *CommonsRunnerImageSettings `json:"settings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsUpdateRunnerImageInput CommonsUpdateRunnerImageInput

// NewCommonsUpdateRunnerImageInput instantiates a new CommonsUpdateRunnerImageInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsUpdateRunnerImageInput() *CommonsUpdateRunnerImageInput {
	this := CommonsUpdateRunnerImageInput{}
	return &this
}

// NewCommonsUpdateRunnerImageInputWithDefaults instantiates a new CommonsUpdateRunnerImageInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsUpdateRunnerImageInputWithDefaults() *CommonsUpdateRunnerImageInput {
	this := CommonsUpdateRunnerImageInput{}
	return &this
}

// GetContainerRunnerImage returns the ContainerRunnerImage field value if set, zero value otherwise.
func (o *CommonsUpdateRunnerImageInput) GetContainerRunnerImage() CommonsContainerRunnerImageUpdate {
	if o == nil || IsNil(o.ContainerRunnerImage) {
		var ret CommonsContainerRunnerImageUpdate
		return ret
	}
	return *o.ContainerRunnerImage
}

// GetContainerRunnerImageOk returns a tuple with the ContainerRunnerImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsUpdateRunnerImageInput) GetContainerRunnerImageOk() (*CommonsContainerRunnerImageUpdate, bool) {
	if o == nil || IsNil(o.ContainerRunnerImage) {
		return nil, false
	}
	return o.ContainerRunnerImage, true
}

// HasContainerRunnerImage returns a boolean if a field has been set.
func (o *CommonsUpdateRunnerImageInput) HasContainerRunnerImage() bool {
	if o != nil && !IsNil(o.ContainerRunnerImage) {
		return true
	}

	return false
}

// SetContainerRunnerImage gets a reference to the given CommonsContainerRunnerImageUpdate and assigns it to the ContainerRunnerImage field.
func (o *CommonsUpdateRunnerImageInput) SetContainerRunnerImage(v CommonsContainerRunnerImageUpdate) {
	o.ContainerRunnerImage = &v
}

// GetHooks returns the Hooks field value if set, zero value otherwise.
func (o *CommonsUpdateRunnerImageInput) GetHooks() []CommonsRunnerImageHook {
	if o == nil || IsNil(o.Hooks) {
		var ret []CommonsRunnerImageHook
		return ret
	}
	return o.Hooks
}

// GetHooksOk returns a tuple with the Hooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsUpdateRunnerImageInput) GetHooksOk() ([]CommonsRunnerImageHook, bool) {
	if o == nil || IsNil(o.Hooks) {
		return nil, false
	}
	return o.Hooks, true
}

// HasHooks returns a boolean if a field has been set.
func (o *CommonsUpdateRunnerImageInput) HasHooks() bool {
	if o != nil && !IsNil(o.Hooks) {
		return true
	}

	return false
}

// SetHooks gets a reference to the given []CommonsRunnerImageHook and assigns it to the Hooks field.
func (o *CommonsUpdateRunnerImageInput) SetHooks(v []CommonsRunnerImageHook) {
	o.Hooks = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonsUpdateRunnerImageInput) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsUpdateRunnerImageInput) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonsUpdateRunnerImageInput) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommonsUpdateRunnerImageInput) SetId(v string) {
	o.Id = &v
}

// GetRunnerImagePullSecretId returns the RunnerImagePullSecretId field value if set, zero value otherwise.
func (o *CommonsUpdateRunnerImageInput) GetRunnerImagePullSecretId() string {
	if o == nil || IsNil(o.RunnerImagePullSecretId) {
		var ret string
		return ret
	}
	return *o.RunnerImagePullSecretId
}

// GetRunnerImagePullSecretIdOk returns a tuple with the RunnerImagePullSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsUpdateRunnerImageInput) GetRunnerImagePullSecretIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerImagePullSecretId) {
		return nil, false
	}
	return o.RunnerImagePullSecretId, true
}

// HasRunnerImagePullSecretId returns a boolean if a field has been set.
func (o *CommonsUpdateRunnerImageInput) HasRunnerImagePullSecretId() bool {
	if o != nil && !IsNil(o.RunnerImagePullSecretId) {
		return true
	}

	return false
}

// SetRunnerImagePullSecretId gets a reference to the given string and assigns it to the RunnerImagePullSecretId field.
func (o *CommonsUpdateRunnerImageInput) SetRunnerImagePullSecretId(v string) {
	o.RunnerImagePullSecretId = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *CommonsUpdateRunnerImageInput) GetSettings() CommonsRunnerImageSettings {
	if o == nil || IsNil(o.Settings) {
		var ret CommonsRunnerImageSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsUpdateRunnerImageInput) GetSettingsOk() (*CommonsRunnerImageSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *CommonsUpdateRunnerImageInput) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given CommonsRunnerImageSettings and assigns it to the Settings field.
func (o *CommonsUpdateRunnerImageInput) SetSettings(v CommonsRunnerImageSettings) {
	o.Settings = &v
}

func (o CommonsUpdateRunnerImageInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsUpdateRunnerImageInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerRunnerImage) {
		toSerialize["container_runner_image"] = o.ContainerRunnerImage
	}
	if !IsNil(o.Hooks) {
		toSerialize["hooks"] = o.Hooks
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RunnerImagePullSecretId) {
		toSerialize["runner_image_pull_secret_id"] = o.RunnerImagePullSecretId
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsUpdateRunnerImageInput) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsUpdateRunnerImageInput := _CommonsUpdateRunnerImageInput{}

	err = json.Unmarshal(bytes, &varCommonsUpdateRunnerImageInput)

	if err != nil {
		return err
	}

	*o = CommonsUpdateRunnerImageInput(varCommonsUpdateRunnerImageInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "container_runner_image")
		delete(additionalProperties, "hooks")
		delete(additionalProperties, "id")
		delete(additionalProperties, "runner_image_pull_secret_id")
		delete(additionalProperties, "settings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsUpdateRunnerImageInput struct {
	value *CommonsUpdateRunnerImageInput
	isSet bool
}

func (v NullableCommonsUpdateRunnerImageInput) Get() *CommonsUpdateRunnerImageInput {
	return v.value
}

func (v *NullableCommonsUpdateRunnerImageInput) Set(val *CommonsUpdateRunnerImageInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsUpdateRunnerImageInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsUpdateRunnerImageInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsUpdateRunnerImageInput(val *CommonsUpdateRunnerImageInput) *NullableCommonsUpdateRunnerImageInput {
	return &NullableCommonsUpdateRunnerImageInput{value: val, isSet: true}
}

func (v NullableCommonsUpdateRunnerImageInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsUpdateRunnerImageInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


