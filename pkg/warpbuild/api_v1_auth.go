/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


<<<<<<< HEAD
type V1AuthAPI interface {
=======
type V1AuthApi interface {
>>>>>>> prajjwal-warp-323

	/*
	AuthTokensGet List user tokens

	List user tokens

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAuthTokensGetRequest
	*/
	AuthTokensGet(ctx context.Context) ApiAuthTokensGetRequest

	// AuthTokensGetExecute executes the request
	//  @return []CommonsUserToken
	AuthTokensGetExecute(r ApiAuthTokensGetRequest) ([]CommonsUserToken, *http.Response, error)

	/*
	AuthUser Auth user

	Logs in or signs up the userm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAuthUserRequest
	*/
	AuthUser(ctx context.Context) ApiAuthUserRequest

	// AuthUserExecute executes the request
	//  @return AuthUserResponse
	AuthUserExecute(r ApiAuthUserRequest) (*AuthUserResponse, *http.Response, error)

	/*
	AuthUsersGet List users

	List users from authentication provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAuthUsersGetRequest
	*/
	AuthUsersGet(ctx context.Context) ApiAuthUsersGetRequest

	// AuthUsersGetExecute executes the request
	//  @return []CommonsListUsersResponse
	AuthUsersGetExecute(r ApiAuthUsersGetRequest) ([]CommonsListUsersResponse, *http.Response, error)

	/*
	GetAuthURL Get auth url

	Get auth url

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provider Provider
	@return ApiGetAuthURLRequest
	*/
	GetAuthURL(ctx context.Context, provider string) ApiGetAuthURLRequest

	// GetAuthURLExecute executes the request
	GetAuthURLExecute(r ApiGetAuthURLRequest) (*http.Response, error)

	/*
	GetMe Auth user

	Gets the currently logged in user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetMeRequest
	*/
	GetMe(ctx context.Context) ApiGetMeRequest

	// GetMeExecute executes the request
	//  @return MeResponse
	GetMeExecute(r ApiGetMeRequest) (*MeResponse, *http.Response, error)

	/*
	Logout Logout

	Logs out the user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLogoutRequest
	*/
	Logout(ctx context.Context) ApiLogoutRequest

	// LogoutExecute executes the request
	LogoutExecute(r ApiLogoutRequest) (*http.Response, error)

	/*
	RefreshToken Refresh token

	Refreshes the access token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRefreshTokenRequest
	*/
	RefreshToken(ctx context.Context) ApiRefreshTokenRequest

	// RefreshTokenExecute executes the request
	//  @return TokenRefreshResponse
	RefreshTokenExecute(r ApiRefreshTokenRequest) (*TokenRefreshResponse, *http.Response, error)

	/*
	SwitchOrganization Switch organization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSwitchOrganizationRequest
	*/
	SwitchOrganization(ctx context.Context) ApiSwitchOrganizationRequest

	// SwitchOrganizationExecute executes the request
	//  @return SwitchOrganizationResponse
	SwitchOrganizationExecute(r ApiSwitchOrganizationRequest) (*SwitchOrganizationResponse, *http.Response, error)
}

<<<<<<< HEAD
// V1AuthAPIService V1AuthAPI service
type V1AuthAPIService service

type ApiAuthTokensGetRequest struct {
	ctx context.Context
	ApiService V1AuthAPI
=======
// V1AuthApiService V1AuthApi service
type V1AuthApiService service

type ApiAuthTokensGetRequest struct {
	ctx context.Context
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
	body *CommonsListTokensOptions
}

// ListTokenOptions
func (r ApiAuthTokensGetRequest) Body(body CommonsListTokensOptions) ApiAuthTokensGetRequest {
	r.body = &body
	return r
}

func (r ApiAuthTokensGetRequest) Execute() ([]CommonsUserToken, *http.Response, error) {
	return r.ApiService.AuthTokensGetExecute(r)
}

/*
AuthTokensGet List user tokens

List user tokens

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthTokensGetRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) AuthTokensGet(ctx context.Context) ApiAuthTokensGetRequest {
=======
func (a *V1AuthApiService) AuthTokensGet(ctx context.Context) ApiAuthTokensGetRequest {
>>>>>>> prajjwal-warp-323
	return ApiAuthTokensGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CommonsUserToken
<<<<<<< HEAD
func (a *V1AuthAPIService) AuthTokensGetExecute(r ApiAuthTokensGetRequest) ([]CommonsUserToken, *http.Response, error) {
=======
func (a *V1AuthApiService) AuthTokensGetExecute(r ApiAuthTokensGetRequest) ([]CommonsUserToken, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CommonsUserToken
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.AuthTokensGet")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.AuthTokensGet")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["WarpBuildAdminSecretAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Warp-Build-Admin-Secret"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthUserRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
=======
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
	body *AuthUserRequest
}

// Auth request body
func (r ApiAuthUserRequest) Body(body AuthUserRequest) ApiAuthUserRequest {
	r.body = &body
	return r
}

func (r ApiAuthUserRequest) Execute() (*AuthUserResponse, *http.Response, error) {
	return r.ApiService.AuthUserExecute(r)
}

/*
AuthUser Auth user

Logs in or signs up the userm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthUserRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) AuthUser(ctx context.Context) ApiAuthUserRequest {
=======
func (a *V1AuthApiService) AuthUser(ctx context.Context) ApiAuthUserRequest {
>>>>>>> prajjwal-warp-323
	return ApiAuthUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthUserResponse
<<<<<<< HEAD
func (a *V1AuthAPIService) AuthUserExecute(r ApiAuthUserRequest) (*AuthUserResponse, *http.Response, error) {
=======
func (a *V1AuthApiService) AuthUserExecute(r ApiAuthUserRequest) (*AuthUserResponse, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthUserResponse
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.AuthUser")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.AuthUser")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthUsersGetRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
=======
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
	body *CommonsListUsersOptions
}

// ListUsersOptions
func (r ApiAuthUsersGetRequest) Body(body CommonsListUsersOptions) ApiAuthUsersGetRequest {
	r.body = &body
	return r
}

func (r ApiAuthUsersGetRequest) Execute() ([]CommonsListUsersResponse, *http.Response, error) {
	return r.ApiService.AuthUsersGetExecute(r)
}

/*
AuthUsersGet List users

List users from authentication provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthUsersGetRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) AuthUsersGet(ctx context.Context) ApiAuthUsersGetRequest {
=======
func (a *V1AuthApiService) AuthUsersGet(ctx context.Context) ApiAuthUsersGetRequest {
>>>>>>> prajjwal-warp-323
	return ApiAuthUsersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CommonsListUsersResponse
<<<<<<< HEAD
func (a *V1AuthAPIService) AuthUsersGetExecute(r ApiAuthUsersGetRequest) ([]CommonsListUsersResponse, *http.Response, error) {
=======
func (a *V1AuthApiService) AuthUsersGetExecute(r ApiAuthUsersGetRequest) ([]CommonsListUsersResponse, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CommonsListUsersResponse
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.AuthUsersGet")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.AuthUsersGet")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["WarpBuildAdminSecretAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Warp-Build-Admin-Secret"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAuthURLRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
	provider string
	inviteCode *string
}

// Invite code if any
func (r ApiGetAuthURLRequest) InviteCode(inviteCode string) ApiGetAuthURLRequest {
	r.inviteCode = &inviteCode
	return r
=======
	ApiService V1AuthApi
	provider string
>>>>>>> prajjwal-warp-323
}

func (r ApiGetAuthURLRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAuthURLExecute(r)
}

/*
GetAuthURL Get auth url

Get auth url

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provider Provider
 @return ApiGetAuthURLRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) GetAuthURL(ctx context.Context, provider string) ApiGetAuthURLRequest {
=======
func (a *V1AuthApiService) GetAuthURL(ctx context.Context, provider string) ApiGetAuthURLRequest {
>>>>>>> prajjwal-warp-323
	return ApiGetAuthURLRequest{
		ApiService: a,
		ctx: ctx,
		provider: provider,
	}
}

// Execute executes the request
<<<<<<< HEAD
func (a *V1AuthAPIService) GetAuthURLExecute(r ApiGetAuthURLRequest) (*http.Response, error) {
=======
func (a *V1AuthApiService) GetAuthURLExecute(r ApiGetAuthURLRequest) (*http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.GetAuthURL")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.GetAuthURL")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/login/{provider}"
	localVarPath = strings.Replace(localVarPath, "{"+"provider"+"}", url.PathEscape(parameterValueToString(r.provider, "provider")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

<<<<<<< HEAD
	if r.inviteCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invite_code", r.inviteCode, "")
	}
=======
>>>>>>> prajjwal-warp-323
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 302 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMeRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
=======
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
}

func (r ApiGetMeRequest) Execute() (*MeResponse, *http.Response, error) {
	return r.ApiService.GetMeExecute(r)
}

/*
GetMe Auth user

Gets the currently logged in user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMeRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) GetMe(ctx context.Context) ApiGetMeRequest {
=======
func (a *V1AuthApiService) GetMe(ctx context.Context) ApiGetMeRequest {
>>>>>>> prajjwal-warp-323
	return ApiGetMeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MeResponse
<<<<<<< HEAD
func (a *V1AuthAPIService) GetMeExecute(r ApiGetMeRequest) (*MeResponse, *http.Response, error) {
=======
func (a *V1AuthApiService) GetMeExecute(r ApiGetMeRequest) (*MeResponse, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MeResponse
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.GetMe")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.GetMe")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/me"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLogoutRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
=======
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
}

func (r ApiLogoutRequest) Execute() (*http.Response, error) {
	return r.ApiService.LogoutExecute(r)
}

/*
Logout Logout

Logs out the user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLogoutRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) Logout(ctx context.Context) ApiLogoutRequest {
=======
func (a *V1AuthApiService) Logout(ctx context.Context) ApiLogoutRequest {
>>>>>>> prajjwal-warp-323
	return ApiLogoutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
<<<<<<< HEAD
func (a *V1AuthAPIService) LogoutExecute(r ApiLogoutRequest) (*http.Response, error) {
=======
func (a *V1AuthApiService) LogoutExecute(r ApiLogoutRequest) (*http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.Logout")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.Logout")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/logout"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRefreshTokenRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
=======
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
	body *TokenRefreshRequest
}

// Refresh token
func (r ApiRefreshTokenRequest) Body(body TokenRefreshRequest) ApiRefreshTokenRequest {
	r.body = &body
	return r
}

func (r ApiRefreshTokenRequest) Execute() (*TokenRefreshResponse, *http.Response, error) {
	return r.ApiService.RefreshTokenExecute(r)
}

/*
RefreshToken Refresh token

Refreshes the access token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRefreshTokenRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) RefreshToken(ctx context.Context) ApiRefreshTokenRequest {
=======
func (a *V1AuthApiService) RefreshToken(ctx context.Context) ApiRefreshTokenRequest {
>>>>>>> prajjwal-warp-323
	return ApiRefreshTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TokenRefreshResponse
<<<<<<< HEAD
func (a *V1AuthAPIService) RefreshTokenExecute(r ApiRefreshTokenRequest) (*TokenRefreshResponse, *http.Response, error) {
=======
func (a *V1AuthApiService) RefreshTokenExecute(r ApiRefreshTokenRequest) (*TokenRefreshResponse, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TokenRefreshResponse
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.RefreshToken")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.RefreshToken")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/token/refresh"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSwitchOrganizationRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1AuthAPI
=======
	ApiService V1AuthApi
>>>>>>> prajjwal-warp-323
	body *SwitchOrganizationRequest
}

// Switch organization
func (r ApiSwitchOrganizationRequest) Body(body SwitchOrganizationRequest) ApiSwitchOrganizationRequest {
	r.body = &body
	return r
}

func (r ApiSwitchOrganizationRequest) Execute() (*SwitchOrganizationResponse, *http.Response, error) {
	return r.ApiService.SwitchOrganizationExecute(r)
}

/*
SwitchOrganization Switch organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSwitchOrganizationRequest
*/
<<<<<<< HEAD
func (a *V1AuthAPIService) SwitchOrganization(ctx context.Context) ApiSwitchOrganizationRequest {
=======
func (a *V1AuthApiService) SwitchOrganization(ctx context.Context) ApiSwitchOrganizationRequest {
>>>>>>> prajjwal-warp-323
	return ApiSwitchOrganizationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SwitchOrganizationResponse
<<<<<<< HEAD
func (a *V1AuthAPIService) SwitchOrganizationExecute(r ApiSwitchOrganizationRequest) (*SwitchOrganizationResponse, *http.Response, error) {
=======
func (a *V1AuthApiService) SwitchOrganizationExecute(r ApiSwitchOrganizationRequest) (*SwitchOrganizationResponse, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SwitchOrganizationResponse
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthAPIService.SwitchOrganization")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1AuthApiService.SwitchOrganization")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/switch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
