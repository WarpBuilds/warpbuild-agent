/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsAddRunnerInstanceInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsAddRunnerInstanceInput{}

// CommonsAddRunnerInstanceInput struct for CommonsAddRunnerInstanceInput
type CommonsAddRunnerInstanceInput struct {
	ProviderId *string `json:"provider_id,omitempty"`
	RunnerSetId *string `json:"runner_set_id,omitempty"`
	UniqueExternalId *string `json:"unique_external_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsAddRunnerInstanceInput CommonsAddRunnerInstanceInput

// NewCommonsAddRunnerInstanceInput instantiates a new CommonsAddRunnerInstanceInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsAddRunnerInstanceInput() *CommonsAddRunnerInstanceInput {
	this := CommonsAddRunnerInstanceInput{}
	return &this
}

// NewCommonsAddRunnerInstanceInputWithDefaults instantiates a new CommonsAddRunnerInstanceInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsAddRunnerInstanceInputWithDefaults() *CommonsAddRunnerInstanceInput {
	this := CommonsAddRunnerInstanceInput{}
	return &this
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *CommonsAddRunnerInstanceInput) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAddRunnerInstanceInput) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *CommonsAddRunnerInstanceInput) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *CommonsAddRunnerInstanceInput) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetRunnerSetId returns the RunnerSetId field value if set, zero value otherwise.
func (o *CommonsAddRunnerInstanceInput) GetRunnerSetId() string {
	if o == nil || IsNil(o.RunnerSetId) {
		var ret string
		return ret
	}
	return *o.RunnerSetId
}

// GetRunnerSetIdOk returns a tuple with the RunnerSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAddRunnerInstanceInput) GetRunnerSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerSetId) {
		return nil, false
	}
	return o.RunnerSetId, true
}

// HasRunnerSetId returns a boolean if a field has been set.
func (o *CommonsAddRunnerInstanceInput) HasRunnerSetId() bool {
	if o != nil && !IsNil(o.RunnerSetId) {
		return true
	}

	return false
}

// SetRunnerSetId gets a reference to the given string and assigns it to the RunnerSetId field.
func (o *CommonsAddRunnerInstanceInput) SetRunnerSetId(v string) {
	o.RunnerSetId = &v
}

// GetUniqueExternalId returns the UniqueExternalId field value if set, zero value otherwise.
func (o *CommonsAddRunnerInstanceInput) GetUniqueExternalId() string {
	if o == nil || IsNil(o.UniqueExternalId) {
		var ret string
		return ret
	}
	return *o.UniqueExternalId
}

// GetUniqueExternalIdOk returns a tuple with the UniqueExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAddRunnerInstanceInput) GetUniqueExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueExternalId) {
		return nil, false
	}
	return o.UniqueExternalId, true
}

// HasUniqueExternalId returns a boolean if a field has been set.
func (o *CommonsAddRunnerInstanceInput) HasUniqueExternalId() bool {
	if o != nil && !IsNil(o.UniqueExternalId) {
		return true
	}

	return false
}

// SetUniqueExternalId gets a reference to the given string and assigns it to the UniqueExternalId field.
func (o *CommonsAddRunnerInstanceInput) SetUniqueExternalId(v string) {
	o.UniqueExternalId = &v
}

func (o CommonsAddRunnerInstanceInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsAddRunnerInstanceInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.RunnerSetId) {
		toSerialize["runner_set_id"] = o.RunnerSetId
	}
	if !IsNil(o.UniqueExternalId) {
		toSerialize["unique_external_id"] = o.UniqueExternalId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsAddRunnerInstanceInput) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsAddRunnerInstanceInput := _CommonsAddRunnerInstanceInput{}

	err = json.Unmarshal(bytes, &varCommonsAddRunnerInstanceInput)

	if err != nil {
		return err
	}

	*o = CommonsAddRunnerInstanceInput(varCommonsAddRunnerInstanceInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "provider_id")
		delete(additionalProperties, "runner_set_id")
		delete(additionalProperties, "unique_external_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsAddRunnerInstanceInput struct {
	value *CommonsAddRunnerInstanceInput
	isSet bool
}

func (v NullableCommonsAddRunnerInstanceInput) Get() *CommonsAddRunnerInstanceInput {
	return v.value
}

func (v *NullableCommonsAddRunnerInstanceInput) Set(val *CommonsAddRunnerInstanceInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsAddRunnerInstanceInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsAddRunnerInstanceInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsAddRunnerInstanceInput(val *CommonsAddRunnerInstanceInput) *NullableCommonsAddRunnerInstanceInput {
	return &NullableCommonsAddRunnerInstanceInput{value: val, isSet: true}
}

func (v NullableCommonsAddRunnerInstanceInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsAddRunnerInstanceInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


