/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the UpdateVCSIntegrationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVCSIntegrationResponse{}

// UpdateVCSIntegrationResponse struct for UpdateVCSIntegrationResponse
type UpdateVCSIntegrationResponse struct {
	NewSession *AuthUserResponse `json:"new_session,omitempty"`
	VcsIntegration *VCSIntegration `json:"vcs_integration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVCSIntegrationResponse UpdateVCSIntegrationResponse

// NewUpdateVCSIntegrationResponse instantiates a new UpdateVCSIntegrationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVCSIntegrationResponse() *UpdateVCSIntegrationResponse {
	this := UpdateVCSIntegrationResponse{}
	return &this
}

// NewUpdateVCSIntegrationResponseWithDefaults instantiates a new UpdateVCSIntegrationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVCSIntegrationResponseWithDefaults() *UpdateVCSIntegrationResponse {
	this := UpdateVCSIntegrationResponse{}
	return &this
}

// GetNewSession returns the NewSession field value if set, zero value otherwise.
func (o *UpdateVCSIntegrationResponse) GetNewSession() AuthUserResponse {
	if o == nil || IsNil(o.NewSession) {
		var ret AuthUserResponse
		return ret
	}
	return *o.NewSession
}

// GetNewSessionOk returns a tuple with the NewSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVCSIntegrationResponse) GetNewSessionOk() (*AuthUserResponse, bool) {
	if o == nil || IsNil(o.NewSession) {
		return nil, false
	}
	return o.NewSession, true
}

// HasNewSession returns a boolean if a field has been set.
func (o *UpdateVCSIntegrationResponse) HasNewSession() bool {
	if o != nil && !IsNil(o.NewSession) {
		return true
	}

	return false
}

// SetNewSession gets a reference to the given AuthUserResponse and assigns it to the NewSession field.
func (o *UpdateVCSIntegrationResponse) SetNewSession(v AuthUserResponse) {
	o.NewSession = &v
}

// GetVcsIntegration returns the VcsIntegration field value if set, zero value otherwise.
func (o *UpdateVCSIntegrationResponse) GetVcsIntegration() VCSIntegration {
	if o == nil || IsNil(o.VcsIntegration) {
		var ret VCSIntegration
		return ret
	}
	return *o.VcsIntegration
}

// GetVcsIntegrationOk returns a tuple with the VcsIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVCSIntegrationResponse) GetVcsIntegrationOk() (*VCSIntegration, bool) {
	if o == nil || IsNil(o.VcsIntegration) {
		return nil, false
	}
	return o.VcsIntegration, true
}

// HasVcsIntegration returns a boolean if a field has been set.
func (o *UpdateVCSIntegrationResponse) HasVcsIntegration() bool {
	if o != nil && !IsNil(o.VcsIntegration) {
		return true
	}

	return false
}

// SetVcsIntegration gets a reference to the given VCSIntegration and assigns it to the VcsIntegration field.
func (o *UpdateVCSIntegrationResponse) SetVcsIntegration(v VCSIntegration) {
	o.VcsIntegration = &v
}

func (o UpdateVCSIntegrationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVCSIntegrationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewSession) {
		toSerialize["new_session"] = o.NewSession
	}
	if !IsNil(o.VcsIntegration) {
		toSerialize["vcs_integration"] = o.VcsIntegration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVCSIntegrationResponse) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateVCSIntegrationResponse := _UpdateVCSIntegrationResponse{}

<<<<<<< HEAD
	err = json.Unmarshal(bytes, &varUpdateVCSIntegrationResponse)

	if err != nil {
		return err
	}

	*o = UpdateVCSIntegrationResponse(varUpdateVCSIntegrationResponse)

=======
	if err = json.Unmarshal(bytes, &varUpdateVCSIntegrationResponse); err == nil {
		*o = UpdateVCSIntegrationResponse(varUpdateVCSIntegrationResponse)
	}

>>>>>>> prajjwal-warp-323
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "new_session")
		delete(additionalProperties, "vcs_integration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVCSIntegrationResponse struct {
	value *UpdateVCSIntegrationResponse
	isSet bool
}

func (v NullableUpdateVCSIntegrationResponse) Get() *UpdateVCSIntegrationResponse {
	return v.value
}

func (v *NullableUpdateVCSIntegrationResponse) Set(val *UpdateVCSIntegrationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVCSIntegrationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVCSIntegrationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVCSIntegrationResponse(val *UpdateVCSIntegrationResponse) *NullableUpdateVCSIntegrationResponse {
	return &NullableUpdateVCSIntegrationResponse{value: val, isSet: true}
}

func (v NullableUpdateVCSIntegrationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVCSIntegrationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


