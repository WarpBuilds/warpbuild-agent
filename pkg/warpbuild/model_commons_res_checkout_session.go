/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsResCheckoutSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsResCheckoutSession{}

// CommonsResCheckoutSession struct for CommonsResCheckoutSession
type CommonsResCheckoutSession struct {
	RedirectUrl *string `json:"redirect_url,omitempty"`
	SessionId *string `json:"session_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsResCheckoutSession CommonsResCheckoutSession

// NewCommonsResCheckoutSession instantiates a new CommonsResCheckoutSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsResCheckoutSession() *CommonsResCheckoutSession {
	this := CommonsResCheckoutSession{}
	return &this
}

// NewCommonsResCheckoutSessionWithDefaults instantiates a new CommonsResCheckoutSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsResCheckoutSessionWithDefaults() *CommonsResCheckoutSession {
	this := CommonsResCheckoutSession{}
	return &this
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *CommonsResCheckoutSession) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsResCheckoutSession) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *CommonsResCheckoutSession) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *CommonsResCheckoutSession) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *CommonsResCheckoutSession) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsResCheckoutSession) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *CommonsResCheckoutSession) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *CommonsResCheckoutSession) SetSessionId(v string) {
	o.SessionId = &v
}

func (o CommonsResCheckoutSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsResCheckoutSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirect_url"] = o.RedirectUrl
	}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsResCheckoutSession) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsResCheckoutSession := _CommonsResCheckoutSession{}

<<<<<<< HEAD
	err = json.Unmarshal(bytes, &varCommonsResCheckoutSession)

	if err != nil {
		return err
	}

	*o = CommonsResCheckoutSession(varCommonsResCheckoutSession)

=======
	if err = json.Unmarshal(bytes, &varCommonsResCheckoutSession); err == nil {
		*o = CommonsResCheckoutSession(varCommonsResCheckoutSession)
	}

>>>>>>> prajjwal-warp-323
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "redirect_url")
		delete(additionalProperties, "session_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsResCheckoutSession struct {
	value *CommonsResCheckoutSession
	isSet bool
}

func (v NullableCommonsResCheckoutSession) Get() *CommonsResCheckoutSession {
	return v.value
}

func (v *NullableCommonsResCheckoutSession) Set(val *CommonsResCheckoutSession) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsResCheckoutSession) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsResCheckoutSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsResCheckoutSession(val *CommonsResCheckoutSession) *NullableCommonsResCheckoutSession {
	return &NullableCommonsResCheckoutSession{value: val, isSet: true}
}

func (v NullableCommonsResCheckoutSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsResCheckoutSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


