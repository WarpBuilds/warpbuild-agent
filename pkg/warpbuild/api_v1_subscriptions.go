/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


<<<<<<< HEAD
type V1SubscriptionsAPI interface {
=======
type V1SubscriptionsApi interface {
>>>>>>> prajjwal-warp-323

	/*
	DeleteCurrentSubscription Cancel Org current Subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCurrentSubscriptionRequest
	*/
	DeleteCurrentSubscription(ctx context.Context) ApiDeleteCurrentSubscriptionRequest

	// DeleteCurrentSubscriptionExecute executes the request
	//  @return CommonsSubscriptionDetails
	DeleteCurrentSubscriptionExecute(r ApiDeleteCurrentSubscriptionRequest) (*CommonsSubscriptionDetails, *http.Response, error)

	/*
	DeleteStripePaymentMethod delete stripe setup intent payment method

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId ID for the stripe payment method
	@return ApiDeleteStripePaymentMethodRequest
	*/
	DeleteStripePaymentMethod(ctx context.Context, paymentMethodId string) ApiDeleteStripePaymentMethodRequest

	// DeleteStripePaymentMethodExecute executes the request
	//  @return CommonsSubscriptionDetails
	DeleteStripePaymentMethodExecute(r ApiDeleteStripePaymentMethodRequest) (*CommonsSubscriptionDetails, *http.Response, error)

	/*
<<<<<<< HEAD
=======
	GetBillingInfo Get Billing Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetBillingInfoRequest
	*/
	GetBillingInfo(ctx context.Context) ApiGetBillingInfoRequest

	// GetBillingInfoExecute executes the request
	//  @return CommonsBillingInfo
	GetBillingInfoExecute(r ApiGetBillingInfoRequest) (*CommonsBillingInfo, *http.Response, error)

	/*
	GetCustomerPortalUrl Get customer portal url

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCustomerPortalUrlRequest
	*/
	GetCustomerPortalUrl(ctx context.Context) ApiGetCustomerPortalUrlRequest

	// GetCustomerPortalUrlExecute executes the request
	//  @return string
	GetCustomerPortalUrlExecute(r ApiGetCustomerPortalUrlRequest) (string, *http.Response, error)

	/*
>>>>>>> prajjwal-warp-323
	GetSubscriptionDetails Get Current Org Subscription Details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSubscriptionDetailsRequest
	*/
	GetSubscriptionDetails(ctx context.Context) ApiGetSubscriptionDetailsRequest

	// GetSubscriptionDetailsExecute executes the request
	//  @return CommonsSubscriptionDetails
	GetSubscriptionDetailsExecute(r ApiGetSubscriptionDetailsRequest) (*CommonsSubscriptionDetails, *http.Response, error)

	/*
	InitateSubscriptionCheckout Initiate Checkout for subscription with PG

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInitateSubscriptionCheckoutRequest
	*/
	InitateSubscriptionCheckout(ctx context.Context) ApiInitateSubscriptionCheckoutRequest

	// InitateSubscriptionCheckoutExecute executes the request
	//  @return CommonsResCheckoutSession
	InitateSubscriptionCheckoutExecute(r ApiInitateSubscriptionCheckoutRequest) (*CommonsResCheckoutSession, *http.Response, error)

	/*
	InitiateSetupIntent Initiate Checkout for subscription with PG

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInitiateSetupIntentRequest
	*/
	InitiateSetupIntent(ctx context.Context) ApiInitiateSetupIntentRequest

	// InitiateSetupIntentExecute executes the request
	//  @return CommonsResSetupIntentInit
	InitiateSetupIntentExecute(r ApiInitiateSetupIntentRequest) (*CommonsResSetupIntentInit, *http.Response, error)

	/*
<<<<<<< HEAD
=======
	PostSetupIntent Post Checkout processing for subscription with PG

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSetupIntentRequest
	*/
	PostSetupIntent(ctx context.Context) ApiPostSetupIntentRequest

	// PostSetupIntentExecute executes the request
	//  @return CommonsPostPaymentMethodSetupInput
	PostSetupIntentExecute(r ApiPostSetupIntentRequest) (*CommonsPostPaymentMethodSetupInput, *http.Response, error)

	/*
>>>>>>> prajjwal-warp-323
	StripePaymentMethodDefault update stripe payment method to default

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId ID for the stripe payment method
	@return ApiStripePaymentMethodDefaultRequest
	*/
	StripePaymentMethodDefault(ctx context.Context, paymentMethodId string) ApiStripePaymentMethodDefaultRequest

	// StripePaymentMethodDefaultExecute executes the request
	//  @return CommonsSubscriptionDetails
	StripePaymentMethodDefaultExecute(r ApiStripePaymentMethodDefaultRequest) (*CommonsSubscriptionDetails, *http.Response, error)

	/*
	SubscriptionPGWebhook S2S Webhook received from PG

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param gateway gateway name, current only stripe
	@return ApiSubscriptionPGWebhookRequest
	*/
	SubscriptionPGWebhook(ctx context.Context, gateway string) ApiSubscriptionPGWebhookRequest

	// SubscriptionPGWebhookExecute executes the request
	SubscriptionPGWebhookExecute(r ApiSubscriptionPGWebhookRequest) (*http.Response, error)
<<<<<<< HEAD
}

// V1SubscriptionsAPIService V1SubscriptionsAPI service
type V1SubscriptionsAPIService service

type ApiDeleteCurrentSubscriptionRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsAPI
=======

	/*
	UpdateBillingInfo Update Billing Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateBillingInfoRequest
	*/
	UpdateBillingInfo(ctx context.Context) ApiUpdateBillingInfoRequest

	// UpdateBillingInfoExecute executes the request
	//  @return CommonsBillingInfo
	UpdateBillingInfoExecute(r ApiUpdateBillingInfoRequest) (*CommonsBillingInfo, *http.Response, error)
}

// V1SubscriptionsApiService V1SubscriptionsApi service
type V1SubscriptionsApiService service

type ApiDeleteCurrentSubscriptionRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
}

func (r ApiDeleteCurrentSubscriptionRequest) Execute() (*CommonsSubscriptionDetails, *http.Response, error) {
	return r.ApiService.DeleteCurrentSubscriptionExecute(r)
}

/*
DeleteCurrentSubscription Cancel Org current Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteCurrentSubscriptionRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) DeleteCurrentSubscription(ctx context.Context) ApiDeleteCurrentSubscriptionRequest {
=======
func (a *V1SubscriptionsApiService) DeleteCurrentSubscription(ctx context.Context) ApiDeleteCurrentSubscriptionRequest {
>>>>>>> prajjwal-warp-323
	return ApiDeleteCurrentSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsSubscriptionDetails
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) DeleteCurrentSubscriptionExecute(r ApiDeleteCurrentSubscriptionRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
=======
func (a *V1SubscriptionsApiService) DeleteCurrentSubscriptionExecute(r ApiDeleteCurrentSubscriptionRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsSubscriptionDetails
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.DeleteCurrentSubscription")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.DeleteCurrentSubscription")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteStripePaymentMethodRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1SubscriptionsAPI
=======
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
	paymentMethodId string
}

func (r ApiDeleteStripePaymentMethodRequest) Execute() (*CommonsSubscriptionDetails, *http.Response, error) {
	return r.ApiService.DeleteStripePaymentMethodExecute(r)
}

/*
DeleteStripePaymentMethod delete stripe setup intent payment method

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId ID for the stripe payment method
 @return ApiDeleteStripePaymentMethodRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) DeleteStripePaymentMethod(ctx context.Context, paymentMethodId string) ApiDeleteStripePaymentMethodRequest {
=======
func (a *V1SubscriptionsApiService) DeleteStripePaymentMethod(ctx context.Context, paymentMethodId string) ApiDeleteStripePaymentMethodRequest {
>>>>>>> prajjwal-warp-323
	return ApiDeleteStripePaymentMethodRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return CommonsSubscriptionDetails
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) DeleteStripePaymentMethodExecute(r ApiDeleteStripePaymentMethodRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
=======
func (a *V1SubscriptionsApiService) DeleteStripePaymentMethodExecute(r ApiDeleteStripePaymentMethodRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsSubscriptionDetails
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.DeleteStripePaymentMethod")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.DeleteStripePaymentMethod")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription/stripe/payment_method/{payment_method_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"payment_method_id"+"}", url.PathEscape(parameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

<<<<<<< HEAD
type ApiGetSubscriptionDetailsRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsAPI
=======
type ApiGetBillingInfoRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
}

func (r ApiGetBillingInfoRequest) Execute() (*CommonsBillingInfo, *http.Response, error) {
	return r.ApiService.GetBillingInfoExecute(r)
}

/*
GetBillingInfo Get Billing Info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBillingInfoRequest
*/
func (a *V1SubscriptionsApiService) GetBillingInfo(ctx context.Context) ApiGetBillingInfoRequest {
	return ApiGetBillingInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsBillingInfo
func (a *V1SubscriptionsApiService) GetBillingInfoExecute(r ApiGetBillingInfoRequest) (*CommonsBillingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsBillingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.GetBillingInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomerPortalUrlRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
}

func (r ApiGetCustomerPortalUrlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCustomerPortalUrlExecute(r)
}

/*
GetCustomerPortalUrl Get customer portal url

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCustomerPortalUrlRequest
*/
func (a *V1SubscriptionsApiService) GetCustomerPortalUrl(ctx context.Context) ApiGetCustomerPortalUrlRequest {
	return ApiGetCustomerPortalUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *V1SubscriptionsApiService) GetCustomerPortalUrlExecute(r ApiGetCustomerPortalUrlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.GetCustomerPortalUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription/customer_portal_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubscriptionDetailsRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
}

func (r ApiGetSubscriptionDetailsRequest) Execute() (*CommonsSubscriptionDetails, *http.Response, error) {
	return r.ApiService.GetSubscriptionDetailsExecute(r)
}

/*
GetSubscriptionDetails Get Current Org Subscription Details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSubscriptionDetailsRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) GetSubscriptionDetails(ctx context.Context) ApiGetSubscriptionDetailsRequest {
=======
func (a *V1SubscriptionsApiService) GetSubscriptionDetails(ctx context.Context) ApiGetSubscriptionDetailsRequest {
>>>>>>> prajjwal-warp-323
	return ApiGetSubscriptionDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsSubscriptionDetails
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) GetSubscriptionDetailsExecute(r ApiGetSubscriptionDetailsRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
=======
func (a *V1SubscriptionsApiService) GetSubscriptionDetailsExecute(r ApiGetSubscriptionDetailsRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsSubscriptionDetails
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.GetSubscriptionDetails")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.GetSubscriptionDetails")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInitateSubscriptionCheckoutRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1SubscriptionsAPI
=======
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
	body *CommonsReqCheckoutSession
}

// initiate checkout session input
func (r ApiInitateSubscriptionCheckoutRequest) Body(body CommonsReqCheckoutSession) ApiInitateSubscriptionCheckoutRequest {
	r.body = &body
	return r
}

func (r ApiInitateSubscriptionCheckoutRequest) Execute() (*CommonsResCheckoutSession, *http.Response, error) {
	return r.ApiService.InitateSubscriptionCheckoutExecute(r)
}

/*
InitateSubscriptionCheckout Initiate Checkout for subscription with PG

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInitateSubscriptionCheckoutRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) InitateSubscriptionCheckout(ctx context.Context) ApiInitateSubscriptionCheckoutRequest {
=======
func (a *V1SubscriptionsApiService) InitateSubscriptionCheckout(ctx context.Context) ApiInitateSubscriptionCheckoutRequest {
>>>>>>> prajjwal-warp-323
	return ApiInitateSubscriptionCheckoutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsResCheckoutSession
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) InitateSubscriptionCheckoutExecute(r ApiInitateSubscriptionCheckoutRequest) (*CommonsResCheckoutSession, *http.Response, error) {
=======
func (a *V1SubscriptionsApiService) InitateSubscriptionCheckoutExecute(r ApiInitateSubscriptionCheckoutRequest) (*CommonsResCheckoutSession, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsResCheckoutSession
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.InitateSubscriptionCheckout")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.InitateSubscriptionCheckout")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/checkout"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInitiateSetupIntentRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1SubscriptionsAPI
=======
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
	body *CommonsReqSetupIntentInit
}

// initiate setup intent session input
func (r ApiInitiateSetupIntentRequest) Body(body CommonsReqSetupIntentInit) ApiInitiateSetupIntentRequest {
	r.body = &body
	return r
}

func (r ApiInitiateSetupIntentRequest) Execute() (*CommonsResSetupIntentInit, *http.Response, error) {
	return r.ApiService.InitiateSetupIntentExecute(r)
}

/*
InitiateSetupIntent Initiate Checkout for subscription with PG

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInitiateSetupIntentRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) InitiateSetupIntent(ctx context.Context) ApiInitiateSetupIntentRequest {
=======
func (a *V1SubscriptionsApiService) InitiateSetupIntent(ctx context.Context) ApiInitiateSetupIntentRequest {
>>>>>>> prajjwal-warp-323
	return ApiInitiateSetupIntentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsResSetupIntentInit
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) InitiateSetupIntentExecute(r ApiInitiateSetupIntentRequest) (*CommonsResSetupIntentInit, *http.Response, error) {
=======
func (a *V1SubscriptionsApiService) InitiateSetupIntentExecute(r ApiInitiateSetupIntentRequest) (*CommonsResSetupIntentInit, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsResSetupIntentInit
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.InitiateSetupIntent")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.InitiateSetupIntent")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/setup_intent/init"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

<<<<<<< HEAD
type ApiStripePaymentMethodDefaultRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsAPI
=======
type ApiPostSetupIntentRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
	body *CommonsPostPaymentMethodSetupInput
}

// post setup intent session input
func (r ApiPostSetupIntentRequest) Body(body CommonsPostPaymentMethodSetupInput) ApiPostSetupIntentRequest {
	r.body = &body
	return r
}

func (r ApiPostSetupIntentRequest) Execute() (*CommonsPostPaymentMethodSetupInput, *http.Response, error) {
	return r.ApiService.PostSetupIntentExecute(r)
}

/*
PostSetupIntent Post Checkout processing for subscription with PG

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSetupIntentRequest
*/
func (a *V1SubscriptionsApiService) PostSetupIntent(ctx context.Context) ApiPostSetupIntentRequest {
	return ApiPostSetupIntentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsPostPaymentMethodSetupInput
func (a *V1SubscriptionsApiService) PostSetupIntentExecute(r ApiPostSetupIntentRequest) (*CommonsPostPaymentMethodSetupInput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsPostPaymentMethodSetupInput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.PostSetupIntent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/setup_intent/post_processor"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStripePaymentMethodDefaultRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
	paymentMethodId string
}

func (r ApiStripePaymentMethodDefaultRequest) Execute() (*CommonsSubscriptionDetails, *http.Response, error) {
	return r.ApiService.StripePaymentMethodDefaultExecute(r)
}

/*
StripePaymentMethodDefault update stripe payment method to default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId ID for the stripe payment method
 @return ApiStripePaymentMethodDefaultRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) StripePaymentMethodDefault(ctx context.Context, paymentMethodId string) ApiStripePaymentMethodDefaultRequest {
=======
func (a *V1SubscriptionsApiService) StripePaymentMethodDefault(ctx context.Context, paymentMethodId string) ApiStripePaymentMethodDefaultRequest {
>>>>>>> prajjwal-warp-323
	return ApiStripePaymentMethodDefaultRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return CommonsSubscriptionDetails
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) StripePaymentMethodDefaultExecute(r ApiStripePaymentMethodDefaultRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
=======
func (a *V1SubscriptionsApiService) StripePaymentMethodDefaultExecute(r ApiStripePaymentMethodDefaultRequest) (*CommonsSubscriptionDetails, *http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsSubscriptionDetails
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.StripePaymentMethodDefault")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.StripePaymentMethodDefault")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription/stripe/payment_method/{payment_method_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"payment_method_id"+"}", url.PathEscape(parameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionPGWebhookRequest struct {
	ctx context.Context
<<<<<<< HEAD
	ApiService V1SubscriptionsAPI
=======
	ApiService V1SubscriptionsApi
>>>>>>> prajjwal-warp-323
	gateway string
}

func (r ApiSubscriptionPGWebhookRequest) Execute() (*http.Response, error) {
	return r.ApiService.SubscriptionPGWebhookExecute(r)
}

/*
SubscriptionPGWebhook S2S Webhook received from PG

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param gateway gateway name, current only stripe
 @return ApiSubscriptionPGWebhookRequest
*/
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) SubscriptionPGWebhook(ctx context.Context, gateway string) ApiSubscriptionPGWebhookRequest {
=======
func (a *V1SubscriptionsApiService) SubscriptionPGWebhook(ctx context.Context, gateway string) ApiSubscriptionPGWebhookRequest {
>>>>>>> prajjwal-warp-323
	return ApiSubscriptionPGWebhookRequest{
		ApiService: a,
		ctx: ctx,
		gateway: gateway,
	}
}

// Execute executes the request
<<<<<<< HEAD
func (a *V1SubscriptionsAPIService) SubscriptionPGWebhookExecute(r ApiSubscriptionPGWebhookRequest) (*http.Response, error) {
=======
func (a *V1SubscriptionsApiService) SubscriptionPGWebhookExecute(r ApiSubscriptionPGWebhookRequest) (*http.Response, error) {
>>>>>>> prajjwal-warp-323
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

<<<<<<< HEAD
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsAPIService.SubscriptionPGWebhook")
=======
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.SubscriptionPGWebhook")
>>>>>>> prajjwal-warp-323
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription/{gateway}/webhook"
	localVarPath = strings.Replace(localVarPath, "{"+"gateway"+"}", url.PathEscape(parameterValueToString(r.gateway, "gateway")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
<<<<<<< HEAD
=======

type ApiUpdateBillingInfoRequest struct {
	ctx context.Context
	ApiService V1SubscriptionsApi
	body *CommonsUpdateBillingInfoInput
}

// billing info update input
func (r ApiUpdateBillingInfoRequest) Body(body CommonsUpdateBillingInfoInput) ApiUpdateBillingInfoRequest {
	r.body = &body
	return r
}

func (r ApiUpdateBillingInfoRequest) Execute() (*CommonsBillingInfo, *http.Response, error) {
	return r.ApiService.UpdateBillingInfoExecute(r)
}

/*
UpdateBillingInfo Update Billing Info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateBillingInfoRequest
*/
func (a *V1SubscriptionsApiService) UpdateBillingInfo(ctx context.Context) ApiUpdateBillingInfoRequest {
	return ApiUpdateBillingInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonsBillingInfo
func (a *V1SubscriptionsApiService) UpdateBillingInfoExecute(r ApiUpdateBillingInfoRequest) (*CommonsBillingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonsBillingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1SubscriptionsApiService.UpdateBillingInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWTKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v WarpBuildAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
>>>>>>> prajjwal-warp-323
