/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRateCalculationOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRateCalculationOutput{}

// CommonsRateCalculationOutput struct for CommonsRateCalculationOutput
type CommonsRateCalculationOutput struct {
	Currency *string `json:"currency,omitempty"`
	Rate *float32 `json:"rate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRateCalculationOutput CommonsRateCalculationOutput

// NewCommonsRateCalculationOutput instantiates a new CommonsRateCalculationOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRateCalculationOutput() *CommonsRateCalculationOutput {
	this := CommonsRateCalculationOutput{}
	return &this
}

// NewCommonsRateCalculationOutputWithDefaults instantiates a new CommonsRateCalculationOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRateCalculationOutputWithDefaults() *CommonsRateCalculationOutput {
	this := CommonsRateCalculationOutput{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CommonsRateCalculationOutput) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRateCalculationOutput) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CommonsRateCalculationOutput) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CommonsRateCalculationOutput) SetCurrency(v string) {
	o.Currency = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *CommonsRateCalculationOutput) GetRate() float32 {
	if o == nil || IsNil(o.Rate) {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsRateCalculationOutput) GetRateOk() (*float32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *CommonsRateCalculationOutput) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *CommonsRateCalculationOutput) SetRate(v float32) {
	o.Rate = &v
}

func (o CommonsRateCalculationOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRateCalculationOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRateCalculationOutput) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRateCalculationOutput := _CommonsRateCalculationOutput{}

	if err = json.Unmarshal(bytes, &varCommonsRateCalculationOutput); err == nil {
		*o = CommonsRateCalculationOutput(varCommonsRateCalculationOutput)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "rate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRateCalculationOutput struct {
	value *CommonsRateCalculationOutput
	isSet bool
}

func (v NullableCommonsRateCalculationOutput) Get() *CommonsRateCalculationOutput {
	return v.value
}

func (v *NullableCommonsRateCalculationOutput) Set(val *CommonsRateCalculationOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRateCalculationOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRateCalculationOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRateCalculationOutput(val *CommonsRateCalculationOutput) *NullableCommonsRateCalculationOutput {
	return &NullableCommonsRateCalculationOutput{value: val, isSet: true}
}

func (v NullableCommonsRateCalculationOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRateCalculationOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


