/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsRunnerImagePullSecretDockerCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsRunnerImagePullSecretDockerCredentials{}

// CommonsRunnerImagePullSecretDockerCredentials struct for CommonsRunnerImagePullSecretDockerCredentials
type CommonsRunnerImagePullSecretDockerCredentials struct {
	Host string `json:"host"`
	Password string `json:"password"`
	Username string `json:"username"`
	AdditionalProperties map[string]interface{}
}

type _CommonsRunnerImagePullSecretDockerCredentials CommonsRunnerImagePullSecretDockerCredentials

// NewCommonsRunnerImagePullSecretDockerCredentials instantiates a new CommonsRunnerImagePullSecretDockerCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsRunnerImagePullSecretDockerCredentials(host string, password string, username string) *CommonsRunnerImagePullSecretDockerCredentials {
	this := CommonsRunnerImagePullSecretDockerCredentials{}
	this.Host = host
	this.Password = password
	this.Username = username
	return &this
}

// NewCommonsRunnerImagePullSecretDockerCredentialsWithDefaults instantiates a new CommonsRunnerImagePullSecretDockerCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsRunnerImagePullSecretDockerCredentialsWithDefaults() *CommonsRunnerImagePullSecretDockerCredentials {
	this := CommonsRunnerImagePullSecretDockerCredentials{}
	return &this
}

// GetHost returns the Host field value
func (o *CommonsRunnerImagePullSecretDockerCredentials) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *CommonsRunnerImagePullSecretDockerCredentials) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *CommonsRunnerImagePullSecretDockerCredentials) SetHost(v string) {
	o.Host = v
}

// GetPassword returns the Password field value
func (o *CommonsRunnerImagePullSecretDockerCredentials) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CommonsRunnerImagePullSecretDockerCredentials) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CommonsRunnerImagePullSecretDockerCredentials) SetPassword(v string) {
	o.Password = v
}

// GetUsername returns the Username field value
func (o *CommonsRunnerImagePullSecretDockerCredentials) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CommonsRunnerImagePullSecretDockerCredentials) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CommonsRunnerImagePullSecretDockerCredentials) SetUsername(v string) {
	o.Username = v
}

func (o CommonsRunnerImagePullSecretDockerCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsRunnerImagePullSecretDockerCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["password"] = o.Password
	toSerialize["username"] = o.Username

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsRunnerImagePullSecretDockerCredentials) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsRunnerImagePullSecretDockerCredentials := _CommonsRunnerImagePullSecretDockerCredentials{}

	err = json.Unmarshal(bytes, &varCommonsRunnerImagePullSecretDockerCredentials)

	if err != nil {
		return err
	}

	*o = CommonsRunnerImagePullSecretDockerCredentials(varCommonsRunnerImagePullSecretDockerCredentials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "host")
		delete(additionalProperties, "password")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsRunnerImagePullSecretDockerCredentials struct {
	value *CommonsRunnerImagePullSecretDockerCredentials
	isSet bool
}

func (v NullableCommonsRunnerImagePullSecretDockerCredentials) Get() *CommonsRunnerImagePullSecretDockerCredentials {
	return v.value
}

func (v *NullableCommonsRunnerImagePullSecretDockerCredentials) Set(val *CommonsRunnerImagePullSecretDockerCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsRunnerImagePullSecretDockerCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsRunnerImagePullSecretDockerCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsRunnerImagePullSecretDockerCredentials(val *CommonsRunnerImagePullSecretDockerCredentials) *NullableCommonsRunnerImagePullSecretDockerCredentials {
	return &NullableCommonsRunnerImagePullSecretDockerCredentials{value: val, isSet: true}
}

func (v NullableCommonsRunnerImagePullSecretDockerCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsRunnerImagePullSecretDockerCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


