/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsBalance{}

// CommonsBalance struct for CommonsBalance
type CommonsBalance struct {
	Id *string `json:"id,omitempty"`
	Limit *float32 `json:"limit,omitempty"`
	Percentage *float32 `json:"percentage,omitempty"`
	Used *float32 `json:"used,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsBalance CommonsBalance

// NewCommonsBalance instantiates a new CommonsBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsBalance() *CommonsBalance {
	this := CommonsBalance{}
	return &this
}

// NewCommonsBalanceWithDefaults instantiates a new CommonsBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsBalanceWithDefaults() *CommonsBalance {
	this := CommonsBalance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonsBalance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBalance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonsBalance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommonsBalance) SetId(v string) {
	o.Id = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CommonsBalance) GetLimit() float32 {
	if o == nil || IsNil(o.Limit) {
		var ret float32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBalance) GetLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CommonsBalance) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given float32 and assigns it to the Limit field.
func (o *CommonsBalance) SetLimit(v float32) {
	o.Limit = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *CommonsBalance) GetPercentage() float32 {
	if o == nil || IsNil(o.Percentage) {
		var ret float32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBalance) GetPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *CommonsBalance) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float32 and assigns it to the Percentage field.
func (o *CommonsBalance) SetPercentage(v float32) {
	o.Percentage = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *CommonsBalance) GetUsed() float32 {
	if o == nil || IsNil(o.Used) {
		var ret float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsBalance) GetUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *CommonsBalance) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given float32 and assigns it to the Used field.
func (o *CommonsBalance) SetUsed(v float32) {
	o.Used = &v
}

func (o CommonsBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsBalance) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsBalance := _CommonsBalance{}

	if err = json.Unmarshal(bytes, &varCommonsBalance); err == nil {
		*o = CommonsBalance(varCommonsBalance)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "percentage")
		delete(additionalProperties, "used")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsBalance struct {
	value *CommonsBalance
	isSet bool
}

func (v NullableCommonsBalance) Get() *CommonsBalance {
	return v.value
}

func (v *NullableCommonsBalance) Set(val *CommonsBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsBalance(val *CommonsBalance) *NullableCommonsBalance {
	return &NullableCommonsBalance{value: val, isSet: true}
}

func (v NullableCommonsBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


