/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsByocSku type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsByocSku{}

// CommonsByocSku struct for CommonsByocSku
type CommonsByocSku struct {
	Arch *string `json:"arch,omitempty"`
	InstanceTypes []string `json:"instance_types,omitempty"`
	IsPublic *bool `json:"is_public,omitempty"`
	// NetworkTier is the network tier associated with the instance. This is only applicable for GCP based runners. Passing this for other providers will have no effect.  Possible values:  - PREMIUM: A premium network tier with fast network performance.  - STANDARD: A standard network tier with basic features.  Refer: https://cloud.google.com/network-tiers  Default value is automatically picked if nothing is passed in case of GCP.  +Default: STANDARD
	NetworkTier *string `json:"network_tier,omitempty"`
	RoleArn *string `json:"role_arn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsByocSku CommonsByocSku

// NewCommonsByocSku instantiates a new CommonsByocSku object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsByocSku() *CommonsByocSku {
	this := CommonsByocSku{}
	return &this
}

// NewCommonsByocSkuWithDefaults instantiates a new CommonsByocSku object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsByocSkuWithDefaults() *CommonsByocSku {
	this := CommonsByocSku{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CommonsByocSku) GetArch() string {
	if o == nil || IsNil(o.Arch) {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsByocSku) GetArchOk() (*string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CommonsByocSku) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CommonsByocSku) SetArch(v string) {
	o.Arch = &v
}

// GetInstanceTypes returns the InstanceTypes field value if set, zero value otherwise.
func (o *CommonsByocSku) GetInstanceTypes() []string {
	if o == nil || IsNil(o.InstanceTypes) {
		var ret []string
		return ret
	}
	return o.InstanceTypes
}

// GetInstanceTypesOk returns a tuple with the InstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsByocSku) GetInstanceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.InstanceTypes) {
		return nil, false
	}
	return o.InstanceTypes, true
}

// HasInstanceTypes returns a boolean if a field has been set.
func (o *CommonsByocSku) HasInstanceTypes() bool {
	if o != nil && !IsNil(o.InstanceTypes) {
		return true
	}

	return false
}

// SetInstanceTypes gets a reference to the given []string and assigns it to the InstanceTypes field.
func (o *CommonsByocSku) SetInstanceTypes(v []string) {
	o.InstanceTypes = v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *CommonsByocSku) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsByocSku) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *CommonsByocSku) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *CommonsByocSku) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetNetworkTier returns the NetworkTier field value if set, zero value otherwise.
func (o *CommonsByocSku) GetNetworkTier() string {
	if o == nil || IsNil(o.NetworkTier) {
		var ret string
		return ret
	}
	return *o.NetworkTier
}

// GetNetworkTierOk returns a tuple with the NetworkTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsByocSku) GetNetworkTierOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkTier) {
		return nil, false
	}
	return o.NetworkTier, true
}

// HasNetworkTier returns a boolean if a field has been set.
func (o *CommonsByocSku) HasNetworkTier() bool {
	if o != nil && !IsNil(o.NetworkTier) {
		return true
	}

	return false
}

// SetNetworkTier gets a reference to the given string and assigns it to the NetworkTier field.
func (o *CommonsByocSku) SetNetworkTier(v string) {
	o.NetworkTier = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *CommonsByocSku) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsByocSku) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *CommonsByocSku) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *CommonsByocSku) SetRoleArn(v string) {
	o.RoleArn = &v
}

func (o CommonsByocSku) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsByocSku) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.InstanceTypes) {
		toSerialize["instance_types"] = o.InstanceTypes
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.NetworkTier) {
		toSerialize["network_tier"] = o.NetworkTier
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsByocSku) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsByocSku := _CommonsByocSku{}

	err = json.Unmarshal(bytes, &varCommonsByocSku)

	if err != nil {
		return err
	}

	*o = CommonsByocSku(varCommonsByocSku)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "arch")
		delete(additionalProperties, "instance_types")
		delete(additionalProperties, "is_public")
		delete(additionalProperties, "network_tier")
		delete(additionalProperties, "role_arn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsByocSku struct {
	value *CommonsByocSku
	isSet bool
}

func (v NullableCommonsByocSku) Get() *CommonsByocSku {
	return v.value
}

func (v *NullableCommonsByocSku) Set(val *CommonsByocSku) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsByocSku) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsByocSku) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsByocSku(val *CommonsByocSku) *NullableCommonsByocSku {
	return &NullableCommonsByocSku{value: val, isSet: true}
}

func (v NullableCommonsByocSku) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsByocSku) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


