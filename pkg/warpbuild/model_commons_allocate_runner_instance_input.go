/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsAllocateRunnerInstanceInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsAllocateRunnerInstanceInput{}

// CommonsAllocateRunnerInstanceInput struct for CommonsAllocateRunnerInstanceInput
type CommonsAllocateRunnerInstanceInput struct {
	AllocationRequestedAt *string `json:"allocation_requested_at,omitempty"`
	AllocationRequestedEventAt *string `json:"allocation_requested_event_at,omitempty"`
	Labels []string `json:"labels,omitempty"`
	RunnerFor *string `json:"runner_for,omitempty"`
	UniqueExternalId *string `json:"unique_external_id,omitempty"`
	VcsIntegrationId *string `json:"vcs_integration_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsAllocateRunnerInstanceInput CommonsAllocateRunnerInstanceInput

// NewCommonsAllocateRunnerInstanceInput instantiates a new CommonsAllocateRunnerInstanceInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsAllocateRunnerInstanceInput() *CommonsAllocateRunnerInstanceInput {
	this := CommonsAllocateRunnerInstanceInput{}
	return &this
}

// NewCommonsAllocateRunnerInstanceInputWithDefaults instantiates a new CommonsAllocateRunnerInstanceInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsAllocateRunnerInstanceInputWithDefaults() *CommonsAllocateRunnerInstanceInput {
	this := CommonsAllocateRunnerInstanceInput{}
	return &this
}

// GetAllocationRequestedAt returns the AllocationRequestedAt field value if set, zero value otherwise.
func (o *CommonsAllocateRunnerInstanceInput) GetAllocationRequestedAt() string {
	if o == nil || IsNil(o.AllocationRequestedAt) {
		var ret string
		return ret
	}
	return *o.AllocationRequestedAt
}

// GetAllocationRequestedAtOk returns a tuple with the AllocationRequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAllocateRunnerInstanceInput) GetAllocationRequestedAtOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationRequestedAt) {
		return nil, false
	}
	return o.AllocationRequestedAt, true
}

// HasAllocationRequestedAt returns a boolean if a field has been set.
func (o *CommonsAllocateRunnerInstanceInput) HasAllocationRequestedAt() bool {
	if o != nil && !IsNil(o.AllocationRequestedAt) {
		return true
	}

	return false
}

// SetAllocationRequestedAt gets a reference to the given string and assigns it to the AllocationRequestedAt field.
func (o *CommonsAllocateRunnerInstanceInput) SetAllocationRequestedAt(v string) {
	o.AllocationRequestedAt = &v
}

// GetAllocationRequestedEventAt returns the AllocationRequestedEventAt field value if set, zero value otherwise.
func (o *CommonsAllocateRunnerInstanceInput) GetAllocationRequestedEventAt() string {
	if o == nil || IsNil(o.AllocationRequestedEventAt) {
		var ret string
		return ret
	}
	return *o.AllocationRequestedEventAt
}

// GetAllocationRequestedEventAtOk returns a tuple with the AllocationRequestedEventAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAllocateRunnerInstanceInput) GetAllocationRequestedEventAtOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationRequestedEventAt) {
		return nil, false
	}
	return o.AllocationRequestedEventAt, true
}

// HasAllocationRequestedEventAt returns a boolean if a field has been set.
func (o *CommonsAllocateRunnerInstanceInput) HasAllocationRequestedEventAt() bool {
	if o != nil && !IsNil(o.AllocationRequestedEventAt) {
		return true
	}

	return false
}

// SetAllocationRequestedEventAt gets a reference to the given string and assigns it to the AllocationRequestedEventAt field.
func (o *CommonsAllocateRunnerInstanceInput) SetAllocationRequestedEventAt(v string) {
	o.AllocationRequestedEventAt = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CommonsAllocateRunnerInstanceInput) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAllocateRunnerInstanceInput) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CommonsAllocateRunnerInstanceInput) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CommonsAllocateRunnerInstanceInput) SetLabels(v []string) {
	o.Labels = v
}

// GetRunnerFor returns the RunnerFor field value if set, zero value otherwise.
func (o *CommonsAllocateRunnerInstanceInput) GetRunnerFor() string {
	if o == nil || IsNil(o.RunnerFor) {
		var ret string
		return ret
	}
	return *o.RunnerFor
}

// GetRunnerForOk returns a tuple with the RunnerFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAllocateRunnerInstanceInput) GetRunnerForOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerFor) {
		return nil, false
	}
	return o.RunnerFor, true
}

// HasRunnerFor returns a boolean if a field has been set.
func (o *CommonsAllocateRunnerInstanceInput) HasRunnerFor() bool {
	if o != nil && !IsNil(o.RunnerFor) {
		return true
	}

	return false
}

// SetRunnerFor gets a reference to the given string and assigns it to the RunnerFor field.
func (o *CommonsAllocateRunnerInstanceInput) SetRunnerFor(v string) {
	o.RunnerFor = &v
}

// GetUniqueExternalId returns the UniqueExternalId field value if set, zero value otherwise.
func (o *CommonsAllocateRunnerInstanceInput) GetUniqueExternalId() string {
	if o == nil || IsNil(o.UniqueExternalId) {
		var ret string
		return ret
	}
	return *o.UniqueExternalId
}

// GetUniqueExternalIdOk returns a tuple with the UniqueExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAllocateRunnerInstanceInput) GetUniqueExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueExternalId) {
		return nil, false
	}
	return o.UniqueExternalId, true
}

// HasUniqueExternalId returns a boolean if a field has been set.
func (o *CommonsAllocateRunnerInstanceInput) HasUniqueExternalId() bool {
	if o != nil && !IsNil(o.UniqueExternalId) {
		return true
	}

	return false
}

// SetUniqueExternalId gets a reference to the given string and assigns it to the UniqueExternalId field.
func (o *CommonsAllocateRunnerInstanceInput) SetUniqueExternalId(v string) {
	o.UniqueExternalId = &v
}

// GetVcsIntegrationId returns the VcsIntegrationId field value if set, zero value otherwise.
func (o *CommonsAllocateRunnerInstanceInput) GetVcsIntegrationId() string {
	if o == nil || IsNil(o.VcsIntegrationId) {
		var ret string
		return ret
	}
	return *o.VcsIntegrationId
}

// GetVcsIntegrationIdOk returns a tuple with the VcsIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsAllocateRunnerInstanceInput) GetVcsIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcsIntegrationId) {
		return nil, false
	}
	return o.VcsIntegrationId, true
}

// HasVcsIntegrationId returns a boolean if a field has been set.
func (o *CommonsAllocateRunnerInstanceInput) HasVcsIntegrationId() bool {
	if o != nil && !IsNil(o.VcsIntegrationId) {
		return true
	}

	return false
}

// SetVcsIntegrationId gets a reference to the given string and assigns it to the VcsIntegrationId field.
func (o *CommonsAllocateRunnerInstanceInput) SetVcsIntegrationId(v string) {
	o.VcsIntegrationId = &v
}

func (o CommonsAllocateRunnerInstanceInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsAllocateRunnerInstanceInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationRequestedAt) {
		toSerialize["allocation_requested_at"] = o.AllocationRequestedAt
	}
	if !IsNil(o.AllocationRequestedEventAt) {
		toSerialize["allocation_requested_event_at"] = o.AllocationRequestedEventAt
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.RunnerFor) {
		toSerialize["runner_for"] = o.RunnerFor
	}
	if !IsNil(o.UniqueExternalId) {
		toSerialize["unique_external_id"] = o.UniqueExternalId
	}
	if !IsNil(o.VcsIntegrationId) {
		toSerialize["vcs_integration_id"] = o.VcsIntegrationId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsAllocateRunnerInstanceInput) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsAllocateRunnerInstanceInput := _CommonsAllocateRunnerInstanceInput{}

	err = json.Unmarshal(bytes, &varCommonsAllocateRunnerInstanceInput)

	if err != nil {
		return err
	}

	*o = CommonsAllocateRunnerInstanceInput(varCommonsAllocateRunnerInstanceInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "allocation_requested_at")
		delete(additionalProperties, "allocation_requested_event_at")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "runner_for")
		delete(additionalProperties, "unique_external_id")
		delete(additionalProperties, "vcs_integration_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsAllocateRunnerInstanceInput struct {
	value *CommonsAllocateRunnerInstanceInput
	isSet bool
}

func (v NullableCommonsAllocateRunnerInstanceInput) Get() *CommonsAllocateRunnerInstanceInput {
	return v.value
}

func (v *NullableCommonsAllocateRunnerInstanceInput) Set(val *CommonsAllocateRunnerInstanceInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsAllocateRunnerInstanceInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsAllocateRunnerInstanceInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsAllocateRunnerInstanceInput(val *CommonsAllocateRunnerInstanceInput) *NullableCommonsAllocateRunnerInstanceInput {
	return &NullableCommonsAllocateRunnerInstanceInput{value: val, isSet: true}
}

func (v NullableCommonsAllocateRunnerInstanceInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsAllocateRunnerInstanceInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


