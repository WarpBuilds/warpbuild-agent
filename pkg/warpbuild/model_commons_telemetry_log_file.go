/*
Warp Builds API Docs

This is the docs for warp builds api for argonaut

API version: 0.4.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package warpbuild

import (
	"encoding/json"
)

// checks if the CommonsTelemetryLogFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonsTelemetryLogFile{}

// CommonsTelemetryLogFile struct for CommonsTelemetryLogFile
type CommonsTelemetryLogFile struct {
	FileName *string `json:"file_name,omitempty"`
	PresignedUrl *string `json:"presigned_url,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonsTelemetryLogFile CommonsTelemetryLogFile

// NewCommonsTelemetryLogFile instantiates a new CommonsTelemetryLogFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonsTelemetryLogFile() *CommonsTelemetryLogFile {
	this := CommonsTelemetryLogFile{}
	return &this
}

// NewCommonsTelemetryLogFileWithDefaults instantiates a new CommonsTelemetryLogFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonsTelemetryLogFileWithDefaults() *CommonsTelemetryLogFile {
	this := CommonsTelemetryLogFile{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *CommonsTelemetryLogFile) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsTelemetryLogFile) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *CommonsTelemetryLogFile) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *CommonsTelemetryLogFile) SetFileName(v string) {
	o.FileName = &v
}

// GetPresignedUrl returns the PresignedUrl field value if set, zero value otherwise.
func (o *CommonsTelemetryLogFile) GetPresignedUrl() string {
	if o == nil || IsNil(o.PresignedUrl) {
		var ret string
		return ret
	}
	return *o.PresignedUrl
}

// GetPresignedUrlOk returns a tuple with the PresignedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsTelemetryLogFile) GetPresignedUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PresignedUrl) {
		return nil, false
	}
	return o.PresignedUrl, true
}

// HasPresignedUrl returns a boolean if a field has been set.
func (o *CommonsTelemetryLogFile) HasPresignedUrl() bool {
	if o != nil && !IsNil(o.PresignedUrl) {
		return true
	}

	return false
}

// SetPresignedUrl gets a reference to the given string and assigns it to the PresignedUrl field.
func (o *CommonsTelemetryLogFile) SetPresignedUrl(v string) {
	o.PresignedUrl = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CommonsTelemetryLogFile) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonsTelemetryLogFile) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CommonsTelemetryLogFile) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *CommonsTelemetryLogFile) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o CommonsTelemetryLogFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonsTelemetryLogFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.PresignedUrl) {
		toSerialize["presigned_url"] = o.PresignedUrl
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonsTelemetryLogFile) UnmarshalJSON(bytes []byte) (err error) {
	varCommonsTelemetryLogFile := _CommonsTelemetryLogFile{}

	err = json.Unmarshal(bytes, &varCommonsTelemetryLogFile)

	if err != nil {
		return err
	}

	*o = CommonsTelemetryLogFile(varCommonsTelemetryLogFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "file_name")
		delete(additionalProperties, "presigned_url")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonsTelemetryLogFile struct {
	value *CommonsTelemetryLogFile
	isSet bool
}

func (v NullableCommonsTelemetryLogFile) Get() *CommonsTelemetryLogFile {
	return v.value
}

func (v *NullableCommonsTelemetryLogFile) Set(val *CommonsTelemetryLogFile) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonsTelemetryLogFile) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonsTelemetryLogFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonsTelemetryLogFile(val *CommonsTelemetryLogFile) *NullableCommonsTelemetryLogFile {
	return &NullableCommonsTelemetryLogFile{value: val, isSet: true}
}

func (v NullableCommonsTelemetryLogFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonsTelemetryLogFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


