receivers:
{{- if eq .OS "windows"}}
  windowseventlog/application:
    channel: application
  windowseventlog/security:
    channel: security

  # Tail your service log files
  filelog/services:
    include:
      - 'C:\warpbuilds\runner.github.stdout.log'
      - 'C:\warpbuilds\runner.github.stderr.log'
      - 'C:\warpbuilds\warpbuild-agentd-restarter.stdout.log'
      - 'C:\warpbuilds\warpbuild-agentd-restarter.stderr.log'
      - 'C:\warpbuilds\warpbuild-agentd.stdout.log'
      - 'C:\warpbuilds\warpbuild-agentd.stderr.log'
      - 'C:\warpbuilds\warpbuild-telemetryd.stdout.log'
      - 'C:\warpbuilds\warpbuild-telemetryd.stderr.log'
    start_at: end
    max_log_size: 200KiB
    include_file_name: true
    include_file_path: true
    poll_interval: 20s
{{- else}}
  filelog:
    {{- if eq .OS "darwin"}}
    include: ['/var/log/system.log']
    {{- else if eq .OS "linux"}}
    include: ['/var/log/syslog']
    {{- end}}
    start_at: 'end'
    max_log_size: 200KiB
    include_file_name: false
    include_file_path: false
    poll_interval: 1s
{{- end}}

  hostmetrics:
    collection_interval: 1s
    scrapers:
      {{- if eq .OS "linux" }}
      cpu:
        metrics:
          # keep % utilization, drop raw times
          system.cpu.utilization:
            enabled: true
          system.cpu.time:
            enabled: false
      {{- end }}
      memory:
        metrics:
          # keep % utilization, drop byte counters
          system.memory.utilization:
            enabled: true
          system.memory.usage:
            enabled: false
      network:
        metrics:
          # only keep IO; disable packets/errors/dropped
          system.network.io:
            enabled: true
          system.network.packets:
            enabled: false
          system.network.errors:
            enabled: false
          system.network.dropped:
            enabled: false
      filesystem:
        # Drop pseudo/virtual/container overlay mounts; keep real disks
        exclude_fs_types:
          match_type: strict
          fs_types:
            - overlay
            - squashfs
            - tmpfs
            - devtmpfs
            - proc
            - sysfs
            - cgroup2
        exclude_mount_points:
          match_type: regexp
          mount_points:
            - ^/var/lib/docker/overlay2/.*
            - ^/var/lib/containerd/io\.containerd\.snapshotter\.v1\.overlayfs/.*
            - ^/run/containerd/io\.containerd\.runtime\.v2\.task/.*/rootfs.*
            - ^/snap/.*
        metrics:
          # keep % utilization, drop byte usage
          system.filesystem.utilization:
            enabled: true
          system.filesystem.usage:
            enabled: false

{{- if eq .OS "windows"}}
  windowsperfcounters/processor:
    collection_interval: 30s
    metrics:
      system.cpu.time:
        description: percentage of cpu time
        unit: "%"
        gauge:
    perfcounters:
      - object: "Processor"
        instances: "_Total"
        counters:
          - name: "% Processor Time"
            metric: system.cpu.time
            attributes:
              state: active
          - name: "% Idle Time"
            metric: system.cpu.time
            attributes:
              state: idle
{{- end}}

processors:
  batch/logs:
    timeout: 30s
    send_batch_size: 10_000

  batch/metrics:
    timeout: 60s
    send_batch_size: 10_000_000

  # Keep ONLY these 4 metrics in the pipeline
  filter/only_needed:
    metrics:
      include:
        match_type: strict
        metric_names:
          - system.cpu.utilization
          - system.memory.utilization
          - system.filesystem.utilization
          - system.network.io

  filter/drop_non_internet_nics:
    error_mode: ignore
    metrics:
      datapoint:
        - 'metric.name == "system.network.io" and IsMatch(attributes["device"], "^(lo|lo0|docker.*|cni.*|veth.*|br-.*|virbr.*|wg.*|tun.*|tap.*)$")'

  # Convert cumulative network counters -> delta
  cumulativetodelta:
    include:
      match_type: strict
      metrics:
        - system.network.io

  # Convert delta -> per-second rate (required list syntax)
  deltatorate:
    metrics:
      - system.network.io

  transform/normalize:
    metric_statements:
      - context: datapoint
        statements:
          # Rename NIC attribute to "internet"
          - 'set(attributes["device"], "internet") where metric.name == "system.network.io"'
          # Convert CPU, memory, and filesystem utilization ratios to percentages
          - 'set(value_double, value_double * 100.0) where metric.name == "system.cpu.utilization"'
          - 'set(value_double, value_double * 100.0) where metric.name == "system.memory.utilization"'
          - 'set(value_double, value_double * 100.0) where metric.name == "system.filesystem.utilization"'

  # Collapse CPU to a single % series: sum non-idle states, then average across CPUs.
  metricstransform/cpu_collapse:
    transforms:
      - include: system.cpu.utilization
        match_type: strict
        action: update
        operations:
          # 1) Combine all non-idle states into one "active" value per CPU
          - action: aggregate_label_values
            label: state
            aggregated_values: [user, system, nice, irq, softirq, steal, wait]
            new_value: active
            aggregation_type: sum
          # 2) Average across CPUs and drop labels -> single timeseries
          - action: aggregate_labels
            label_set: []
            aggregation_type: mean

exporters:
  otlphttp:
    logs_endpoint: "http://localhost:{{.Port}}/v1/logs"
    metrics_endpoint: "http://localhost:{{.Port}}/v1/metrics"
    encoding: "json"
    compression: "none"

service:
  pipelines:
    logs:
      receivers: [{{- if eq .OS "windows"}}windowseventlog/application, windowseventlog/security, filelog/services{{- else if eq .OS "darwin"}}filelog{{- else if eq .OS "linux"}}filelog{{- end}}]
      processors: [batch/logs]
      exporters: [otlphttp]   # tee: still send to your HTTP service, and also print locally
    metrics:
      receivers: [hostmetrics{{- if eq .OS "windows"}}, windowsperfcounters/processor{{- end}}]
      processors:
        - filter/only_needed
        - filter/drop_non_internet_nics
        - metricstransform/cpu_collapse
        - cumulativetodelta
        - deltatorate
        - transform/normalize
        - batch/metrics
      exporters: [otlphttp]
