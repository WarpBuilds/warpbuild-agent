receivers:
{{- if eq .OS "windows"}}
  windowseventlog/application:
    channel: application
  windowseventlog/security:
    channel: security

  # Tail your service log files
  filelog/services:
    include:
      - 'C:\warpbuilds\runner.github.stdout.log'
      - 'C:\warpbuilds\runner.github.stderr.log'
      - 'C:\warpbuilds\warpbuild-agentd-restarter.stdout.log'
      - 'C:\warpbuilds\warpbuild-agentd-restarter.stderr.log'
      - 'C:\warpbuilds\warpbuild-agentd.stdout.log'
      - 'C:\warpbuilds\warpbuild-agentd.stderr.log'
      - 'C:\warpbuilds\warpbuild-telemetryd.stdout.log'
      - 'C:\warpbuilds\warpbuild-telemetryd.stderr.log'
    start_at: end
    max_log_size: 200KiB
    include_file_name: true
    include_file_path: true
    poll_interval: 20s

  # GitHub Actions job logs and diagnostic logs
  filelog/gha_logs:
    include:
      - 'C:\actions-runner\_diag\*.log'
      - 'C:\actions-runner\_diag\**\*.log'
      - 'C:\ProgramData\github-actions\*.log'
    start_at: end
    max_log_size: 500KiB
    include_file_name: true
    include_file_path: true
    poll_interval: 10s
    attributes:
      log.type: github_actions
{{- else}}
  filelog:
    {{- if eq .OS "darwin"}}
    include: ['/var/log/system.log']
    {{- else if eq .OS "linux"}}
    include: ['/var/log/syslog']
    {{- end}}
    start_at: 'end'
    max_log_size: 200KiB
    include_file_name: false
    include_file_path: false
    poll_interval: 1s

  # GitHub Actions job logs and diagnostic logs
  filelog/gha_logs:
    include:
      {{- if eq .OS "darwin"}}
      - '/Users/runner/actions-runner/_diag/*.log'
      - '/Users/runner/actions-runner/_diag/**/*.log'
      {{- else if eq .OS "linux"}}
      - '/home/runner/actions-runner/_diag/*.log'
      - '/home/runner/actions-runner/_diag/**/*.log'
      - '/opt/actions-runner/_diag/*.log'
      - '/opt/actions-runner/_diag/**/*.log'
      {{- end}}
    start_at: 'end'
    max_log_size: 500KiB
    include_file_name: true
    include_file_path: true
    poll_interval: 10s
    attributes:
      log.type: github_actions
{{- end}}

  hostmetrics:
    collection_interval: 1s
    scrapers:
      {{- if eq .OS "linux" }}
      cpu:
        metrics:
          # keep % utilization, drop raw times
          system.cpu.utilization:
            enabled: true
          system.cpu.time:
            enabled: false
      {{- end }}
      memory:
        metrics:
          # keep % utilization, drop byte counters
          system.memory.utilization:
            enabled: true
          system.memory.usage:
            enabled: false
      network:
        metrics:
          # only keep IO; disable packets/errors/dropped
          system.network.io:
            enabled: true
          system.network.packets:
            enabled: false
          system.network.errors:
            enabled: false
          system.network.dropped:
            enabled: false
      disk:
        metrics:
          # collect disk throughput and IOPS metrics
          system.disk.io:
            enabled: true
          system.disk.operations:
            enabled: true
          system.disk.io_time:
            enabled: true
          system.disk.operation_time:
            enabled: true
          system.disk.pending_operations:
            enabled: false
          system.disk.merged:
            enabled: false
          system.disk.weighted_io_time:
            enabled: false
      filesystem:
        # Drop pseudo/virtual/container overlay mounts; keep real disks
        exclude_fs_types:
          match_type: strict
          fs_types:
            - overlay
            - squashfs
            - tmpfs
            - devtmpfs
            - proc
            - sysfs
            - cgroup2
        exclude_mount_points:
          match_type: regexp
          mount_points:
            - ^/var/lib/docker/overlay2/.*
            - ^/var/lib/containerd/io\.containerd\.snapshotter\.v1\.overlayfs/.*
            - ^/run/containerd/io\.containerd\.runtime\.v2\.task/.*/rootfs.*
            - ^/snap/.*
        metrics:
          # keep % utilization, drop byte usage
          system.filesystem.utilization:
            enabled: true
          system.filesystem.usage:
            enabled: false

{{- if eq .OS "windows"}}
  windowsperfcounters/processor:
    collection_interval: 30s
    metrics:
      system.cpu.time:
        description: percentage of cpu time
        unit: "%"
        gauge:
    perfcounters:
      - object: "Processor"
        instances: "_Total"
        counters:
          - name: "% Processor Time"
            metric: system.cpu.time
            attributes:
              state: active
          - name: "% Idle Time"
            metric: system.cpu.time
            attributes:
              state: idle
{{- end}}

processors:
  batch/logs:
    timeout: 30s
    send_batch_size: 10_000

  batch/metrics:
    timeout: 30s
    send_batch_size: 10_000_000

  # Keep ONLY these metrics in the pipeline
  filter/only_needed:
    metrics:
      include:
        match_type: strict
        metric_names:
          - system.cpu.utilization
          - system.memory.utilization
          - system.filesystem.utilization
          - system.network.io
          - system.disk.io
          - system.disk.operations
          - system.disk.io_time
          - system.disk.operation_time

  filter/drop_non_internet_nics:
    error_mode: ignore
    metrics:
      datapoint:
        - 'metric.name == "system.network.io" and IsMatch(attributes["device"], "^(lo|lo0|docker.*|cni.*|veth.*|br-.*|virbr.*|wg.*|tun.*|tap.*)$")'

  # Convert cumulative counters -> delta
  cumulativetodelta:
    include:
      match_type: strict
      metrics:
        - system.network.io
        - system.disk.io
        - system.disk.operations
        - system.disk.io_time
        - system.disk.operation_time

  # Convert delta -> per-second rate (required list syntax)
  deltatorate:
    metrics:
      - system.network.io
      - system.disk.io
      - system.disk.operations
      - system.disk.io_time
      - system.disk.operation_time

  transform/normalize:
    metric_statements:
      - context: datapoint
        statements:
          # Rename NIC attribute to "internet"
          - 'set(attributes["device"], "internet") where metric.name == "system.network.io"'

  # Drop idle before aggregating
  filter/drop_cpu_idle:
    metrics:
      datapoint:
        - 'metric.name == "system.cpu.utilization" and attributes["state"] == "idle"'
  
  # 2) Convert ratio -> percent ONCE
  transform/cpu_to_percent:
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          - 'set(value_double, value_double * 100.0) where metric.name == "system.cpu.utilization"'
      - context: metric
        statements:
          - 'set(unit, "percent") where metric.name == "system.cpu.utilization"'

  # 3) Sum across states (user + system + nice + iowait + …), keep per-CPU series
  metricstransform/cpu_sum_states:
    transforms:
      - include: system.cpu.utilization
        action: update
        operations:
          - action: aggregate_labels
            # Remove only "state", keep per-CPU time series
            label_set: ["cpu"]
            aggregation_type: sum

  # 4a) TOTAL CPU (sum across CPUs) and normalize to 100%
  metricstransform/cpu_total_percent:
    transforms:
      - include: system.cpu.utilization
        action: update
        operations:
          - action: aggregate_labels
            label_set: []         # drop "cpu" -> single series per host
            aggregation_type: sum
          - action: update_label
            label: aggregation
            new_label: aggregation
            value_actions:
              - value: total

  # Normalize CPU utilization to 100% (divide by number of vCPUs)
  transform/cpu_normalize_to_100:
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          # Normalize total CPU percentage by dividing by number of logical CPUs
          # This assumes the total was already summed across all CPUs
          - 'set(value_double, value_double / {{.LogicalCPUs}}) where metric.name == "system.cpu.utilization" and attributes["aggregation"] == "total"'

  # Convert memory utilization from ratio to percentage
  transform/mem_to_percentage:
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          # Convert ratio to percentage: multiply by 100
          - 'set(value_double, value_double * 100.0) where metric.name == "system.memory.utilization"'
      - context: metric
        statements:
          # Set unit to percentage
          - 'set(unit, "%") where metric.name == "system.memory.utilization"'

  transform/fs_to_percent:
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          - 'set(value_double, value_double * 100.0)
              where metric.name == "system.filesystem.utilization" and value_double <= 1.0'
      - context: metric
        statements:
          - 'set(unit, "percent") where metric.name == "system.filesystem.utilization"'

  metricstransform/fs_max_percent:
    transforms:
      - include: system.filesystem.utilization
        action: update
        operations:
          - action: aggregate_labels
            label_set: []            # drop device/mount/type → one series per host
            aggregation_type: max
          - action: add_label
            new_label: scope
            new_value: fs_max_percent

exporters:
  otlphttp:
    logs_endpoint: "http://localhost:{{.Port}}/v1/logs"
    metrics_endpoint: "http://localhost:{{.Port}}/v1/metrics"
    encoding: "json"
    compression: "none"
  
  otlphttp/gha_logs:
    logs_endpoint: "http://localhost:{{.Port}}/v1/gha-logs"
    encoding: "json"
    compression: "none"

service:
  telemetry:
    metrics:
      level: none
  pipelines:
    logs:
      receivers: [{{- if eq .OS "windows"}}windowseventlog/application, windowseventlog/security, filelog/services{{- else }}filelog{{- end}}]
      processors: [batch/logs]
      exporters: [otlphttp]   # tee: still send to your HTTP service, and also print locally
    logs/gha_logs:
      receivers: [filelog/gha_logs]
      processors: [batch/logs]
      exporters: [otlphttp/gha_logs]
    metrics:
      receivers: [hostmetrics{{- if eq .OS "windows"}}, windowsperfcounters/processor{{- end}}]
      processors:
        - filter/only_needed
        - filter/drop_non_internet_nics
        - cumulativetodelta
        - deltatorate

        # fs
        - transform/fs_to_percent
        - metricstransform/fs_max_percent

        # cpu
        - filter/drop_cpu_idle
        - transform/cpu_to_percent
        - metricstransform/cpu_sum_states
        - metricstransform/cpu_total_percent
        - transform/cpu_normalize_to_100

        # memory
        - transform/mem_to_percentage

        - transform/normalize
        - batch/metrics
      exporters: [otlphttp]
